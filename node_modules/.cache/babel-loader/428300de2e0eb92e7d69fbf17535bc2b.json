{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\n\n\nvar domhandler_2 = require(\"domhandler\");\n\nObject.defineProperty(exports, \"isTag\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_2.isTag;\n  }\n});\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\n\nfunction isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\n\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\n\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\n\nfunction cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\n\nfunction domEach(array, fn) {\n  var len = array.length;\n\n  for (var i = 0; i < len; i++) fn(array[i], i);\n\n  return array;\n}\n\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\n\nfunction cloneDom(dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return (0, domhandler_1.cloneNode)(el, true);\n  }) : [(0, domhandler_1.cloneNode)(dom, true)]; // Add a root node around the cloned nodes\n\n  var root = new domhandler_1.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n}\n\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\n\n\nfunction isHtml(str) {\n  var tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  var tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}\n\nexports.isHtml = isHtml;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;;;;;;;AAUA;;AAASA;EAAAC;EAAAC;IAAA;EAAK;AAAL;AAET;;;;;;;;AAOA,SAAgBC,SAAhB,CAA6BC,YAA7B,EAA8C;EAC5C,OAAOA,YAAY,CAACC,OAAb,IAAwB,IAA/B;AACD;;AAFDC;AAIA;;;;;;;;;AAQA,SAAgBC,SAAhB,CAA0BC,GAA1B,EAAqC;EACnC,OAAOA,GAAG,CAACC,OAAJ,CAAY,cAAZ,EAA4B,UAACC,CAAD,EAAIC,CAAJ,EAAK;IAAK,QAAC,CAACC,WAAF;EAAe,CAArD,CAAP;AACD;;AAFDN;AAIA;;;;;;;;;;AASA,SAAgBO,OAAhB,CAAwBL,GAAxB,EAAmC;EACjC,OAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,KAAtB,EAA6BK,WAA7B,EAAP;AACD;;AAFDR;AAIA;;;;;;;;;;;;AAWA,SAAgBS,OAAhB,CAGEC,KAHF,EAGcC,EAHd,EAGkD;EAChD,IAAMC,GAAG,GAAGF,KAAK,CAACG,MAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8BH,EAAE,CAACD,KAAK,CAACI,CAAD,CAAN,EAAWA,CAAX,CAAF;;EAC9B,OAAOJ,KAAP;AACD;;AAPDV;AASA;;;;;;;;;;AASA,SAAgBe,QAAhB,CAA4CC,GAA5C,EAAwD;EACtD,IAAMC,KAAK,GACT,YAAYD,GAAZ,GACKE,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBL,GAAzB,EAA8B,UAACM,EAAD,EAAG;IAAK,mCAAUA,EAAV,EAAc,IAAd;EAAmB,CAAzD,CADL,GAEI,CAAC,4BAAUN,GAAV,EAAe,IAAf,CAAD,CAHN,CADsD,CAMtD;;EACA,IAAMO,IAAI,GAAG,IAAIC,qBAAJ,CAAaP,KAAb,CAAb;EACAA,KAAK,CAACQ,OAAN,CAAc,UAACC,IAAD,EAAK;IACjBA,IAAI,CAACC,MAAL,GAAcJ,IAAd;EACD,CAFD;EAIA,OAAON,KAAP;AACD;;AAbDjB;AAeA,IAAW4B,cAAX;;AAAA,WAAWA,cAAX,EAAyB;EACvBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAWA,cAAc,KAAdA,cAAc,MAAzB;AAQA;;;;;;;;;;;;;AAWA,SAAgBC,MAAhB,CAAuB3B,GAAvB,EAAkC;EAChC,IAAM4B,QAAQ,GAAG5B,GAAG,CAAC6B,OAAJ,CAAY,GAAZ,CAAjB;EAEA,IAAID,QAAQ,GAAG,CAAX,IAAgBA,QAAQ,GAAG5B,GAAG,CAACW,MAAJ,GAAa,CAA5C,EAA+C,OAAO,KAAP;EAE/C,IAAMmB,OAAO,GAAG9B,GAAG,CAAC+B,UAAJ,CAAeH,QAAQ,GAAG,CAA1B,CAAhB;EAEA,OACE,CAAEE,OAAO,IAAIJ,cAAc,CAACM,MAA1B,IAAoCF,OAAO,IAAIJ,cAAc,CAACO,MAA/D,IACEH,OAAO,IAAIJ,cAAc,CAACQ,MAA1B,IAAoCJ,OAAO,IAAIJ,cAAc,CAACS,MADhE,IAECL,OAAO,KAAKJ,cAAc,CAACU,WAF7B,KAGApC,GAAG,CAACqC,QAAJ,CAAa,GAAb,EAAkBT,QAAQ,GAAG,CAA7B,CAJF;AAMD;;AAbD9B","names":["Object","enumerable","get","isCheerio","maybeCheerio","cheerio","exports","camelCase","str","replace","_","x","toUpperCase","cssCase","toLowerCase","domEach","array","fn","len","length","i","cloneDom","dom","clone","Array","prototype","map","call","el","root","domhandler_1","forEach","node","parent","CharacterCodes","isHtml","tagStart","indexOf","tagChar","charCodeAt","LowerA","LowerZ","UpperA","UpperZ","Exclamation","includes"],"sources":["utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sentencesToParagraphUnmapper = exports.sentencesToParagraphMapper = exports.wordsToSentenceUnmapperFor = exports.wordsToSentenceMapper = exports.wordsToJoinedStringUnmapperFor = exports.wordsToJoinedStringMapper = void 0;\n\nfunction wordsToJoinedStringMapper(words) {\n  return words.map(w => w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w).join(' ');\n}\n\nexports.wordsToJoinedStringMapper = wordsToJoinedStringMapper;\n\nfunction wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    const words = [];\n\n    for (const candidate of value.split(' ')) {\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\n\nexports.wordsToJoinedStringUnmapperFor = wordsToJoinedStringUnmapperFor;\n\nfunction wordsToSentenceMapper(words) {\n  let sentence = words.join(' ');\n\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\n\nexports.wordsToSentenceMapper = wordsToSentenceMapper;\n\nfunction wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n\n    const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    const words = [];\n    const candidates = adaptedValue.split(' ');\n\n    for (let idx = 0; idx !== candidates.length; ++idx) {\n      const candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\n\nexports.wordsToSentenceUnmapperFor = wordsToSentenceUnmapperFor;\n\nfunction sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\n\nexports.sentencesToParagraphMapper = sentencesToParagraphMapper;\n\nfunction sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const sentences = value.split('. ');\n\n  for (let idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n\n  return sentences;\n}\n\nexports.sentencesToParagraphUnmapper = sentencesToParagraphUnmapper;","map":{"version":3,"names":["Object","defineProperty","exports","value","sentencesToParagraphUnmapper","sentencesToParagraphMapper","wordsToSentenceUnmapperFor","wordsToSentenceMapper","wordsToJoinedStringUnmapperFor","wordsToJoinedStringMapper","words","map","w","length","substr","join","wordsArbitrary","wordsToJoinedStringUnmapper","Error","candidate","split","canShrinkWithoutContext","push","sentence","toUpperCase","substring","wordsToSentenceUnmapper","toLowerCase","adaptedValue","candidates","idx","sentences"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/mappers/WordsToLorem.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sentencesToParagraphUnmapper = exports.sentencesToParagraphMapper = exports.wordsToSentenceUnmapperFor = exports.wordsToSentenceMapper = exports.wordsToJoinedStringUnmapperFor = exports.wordsToJoinedStringMapper = void 0;\nfunction wordsToJoinedStringMapper(words) {\n    return words.map((w) => (w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w)).join(' ');\n}\nexports.wordsToJoinedStringMapper = wordsToJoinedStringMapper;\nfunction wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n    return function wordsToJoinedStringUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        const words = [];\n        for (const candidate of value.split(' ')) {\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexports.wordsToJoinedStringUnmapperFor = wordsToJoinedStringUnmapperFor;\nfunction wordsToSentenceMapper(words) {\n    let sentence = words.join(' ');\n    if (sentence[sentence.length - 1] === ',') {\n        sentence = sentence.substr(0, sentence.length - 1);\n    }\n    return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexports.wordsToSentenceMapper = wordsToSentenceMapper;\nfunction wordsToSentenceUnmapperFor(wordsArbitrary) {\n    return function wordsToSentenceUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        if (value.length < 2 ||\n            value[value.length - 1] !== '.' ||\n            value[value.length - 2] === ',' ||\n            value[0].toLowerCase().toUpperCase() !== value[0]) {\n            throw new Error('Unsupported value');\n        }\n        const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n        const words = [];\n        const candidates = adaptedValue.split(' ');\n        for (let idx = 0; idx !== candidates.length; ++idx) {\n            const candidate = candidates[idx];\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexports.wordsToSentenceUnmapperFor = wordsToSentenceUnmapperFor;\nfunction sentencesToParagraphMapper(sentences) {\n    return sentences.join(' ');\n}\nexports.sentencesToParagraphMapper = sentencesToParagraphMapper;\nfunction sentencesToParagraphUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const sentences = value.split('. ');\n    for (let idx = 0; idx < sentences.length - 1; ++idx) {\n        sentences[idx] += '.';\n    }\n    return sentences;\n}\nexports.sentencesToParagraphUnmapper = sentencesToParagraphUnmapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.float = void 0;\n\nconst integer_1 = require(\"./integer\");\n\nconst FloatHelpers_1 = require(\"./_internals/helpers/FloatHelpers\");\n\nfunction safeFloatToIndex(f, constraintsLabel) {\n  const conversionTrick = 'you can convert any double to a 32-bit float by using `new Float32Array([myDouble])[0]`';\n  const errorMessage = 'fc.float constraints.' + constraintsLabel + ' must be a 32-bit float - ' + conversionTrick;\n\n  if (Number.isNaN(f) || Number.isFinite(f) && (f < -FloatHelpers_1.MAX_VALUE_32 || f > FloatHelpers_1.MAX_VALUE_32)) {\n    throw new Error(errorMessage);\n  }\n\n  const index = (0, FloatHelpers_1.floatToIndex)(f);\n\n  if (!Number.isInteger(index)) {\n    throw new Error(errorMessage);\n  }\n\n  return index;\n}\n\nfunction unmapperFloatToIndex(value) {\n  if (typeof value !== 'number') throw new Error('Unsupported type');\n  return (0, FloatHelpers_1.floatToIndex)(value);\n}\n\nfunction float() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    noDefaultInfinity = false,\n    noNaN = false,\n    min = noDefaultInfinity ? -FloatHelpers_1.MAX_VALUE_32 : Number.NEGATIVE_INFINITY,\n    max = noDefaultInfinity ? FloatHelpers_1.MAX_VALUE_32 : Number.POSITIVE_INFINITY\n  } = constraints;\n  const minIndex = safeFloatToIndex(min, 'min');\n  const maxIndex = safeFloatToIndex(max, 'max');\n\n  if (minIndex > maxIndex) {\n    throw new Error('fc.float constraints.min must be smaller or equal to constraints.max');\n  }\n\n  if (noNaN) {\n    return (0, integer_1.integer)({\n      min: minIndex,\n      max: maxIndex\n    }).map(FloatHelpers_1.indexToFloat, unmapperFloatToIndex);\n  }\n\n  const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;\n  const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;\n  return (0, integer_1.integer)({\n    min: minIndexWithNaN,\n    max: maxIndexWithNaN\n  }).map(index => {\n    if (index > maxIndex || index < minIndex) return Number.NaN;else return (0, FloatHelpers_1.indexToFloat)(index);\n  }, value => {\n    if (typeof value !== 'number') throw new Error('Unsupported type');\n    if (Number.isNaN(value)) return maxIndex !== maxIndexWithNaN ? maxIndexWithNaN : minIndexWithNaN;\n    return (0, FloatHelpers_1.floatToIndex)(value);\n  });\n}\n\nexports.float = float;","map":{"version":3,"names":["Object","defineProperty","exports","value","float","integer_1","require","FloatHelpers_1","safeFloatToIndex","f","constraintsLabel","conversionTrick","errorMessage","Number","isNaN","isFinite","MAX_VALUE_32","Error","index","floatToIndex","isInteger","unmapperFloatToIndex","constraints","noDefaultInfinity","noNaN","min","NEGATIVE_INFINITY","max","POSITIVE_INFINITY","minIndex","maxIndex","integer","map","indexToFloat","minIndexWithNaN","maxIndexWithNaN","NaN"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/float.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.float = void 0;\nconst integer_1 = require(\"./integer\");\nconst FloatHelpers_1 = require(\"./_internals/helpers/FloatHelpers\");\nfunction safeFloatToIndex(f, constraintsLabel) {\n    const conversionTrick = 'you can convert any double to a 32-bit float by using `new Float32Array([myDouble])[0]`';\n    const errorMessage = 'fc.float constraints.' + constraintsLabel + ' must be a 32-bit float - ' + conversionTrick;\n    if (Number.isNaN(f) || (Number.isFinite(f) && (f < -FloatHelpers_1.MAX_VALUE_32 || f > FloatHelpers_1.MAX_VALUE_32))) {\n        throw new Error(errorMessage);\n    }\n    const index = (0, FloatHelpers_1.floatToIndex)(f);\n    if (!Number.isInteger(index)) {\n        throw new Error(errorMessage);\n    }\n    return index;\n}\nfunction unmapperFloatToIndex(value) {\n    if (typeof value !== 'number')\n        throw new Error('Unsupported type');\n    return (0, FloatHelpers_1.floatToIndex)(value);\n}\nfunction float(constraints = {}) {\n    const { noDefaultInfinity = false, noNaN = false, min = noDefaultInfinity ? -FloatHelpers_1.MAX_VALUE_32 : Number.NEGATIVE_INFINITY, max = noDefaultInfinity ? FloatHelpers_1.MAX_VALUE_32 : Number.POSITIVE_INFINITY, } = constraints;\n    const minIndex = safeFloatToIndex(min, 'min');\n    const maxIndex = safeFloatToIndex(max, 'max');\n    if (minIndex > maxIndex) {\n        throw new Error('fc.float constraints.min must be smaller or equal to constraints.max');\n    }\n    if (noNaN) {\n        return (0, integer_1.integer)({ min: minIndex, max: maxIndex }).map(FloatHelpers_1.indexToFloat, unmapperFloatToIndex);\n    }\n    const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;\n    const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;\n    return (0, integer_1.integer)({ min: minIndexWithNaN, max: maxIndexWithNaN }).map((index) => {\n        if (index > maxIndex || index < minIndex)\n            return Number.NaN;\n        else\n            return (0, FloatHelpers_1.indexToFloat)(index);\n    }, (value) => {\n        if (typeof value !== 'number')\n            throw new Error('Unsupported type');\n        if (Number.isNaN(value))\n            return maxIndex !== maxIndexWithNaN ? maxIndexWithNaN : minIndexWithNaN;\n        return (0, FloatHelpers_1.floatToIndex)(value);\n    });\n}\nexports.float = float;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAD,CAA9B;;AACA,SAASE,gBAAT,CAA0BC,CAA1B,EAA6BC,gBAA7B,EAA+C;EAC3C,MAAMC,eAAe,GAAG,yFAAxB;EACA,MAAMC,YAAY,GAAG,0BAA0BF,gBAA1B,GAA6C,4BAA7C,GAA4EC,eAAjG;;EACA,IAAIE,MAAM,CAACC,KAAP,CAAaL,CAAb,KAAoBI,MAAM,CAACE,QAAP,CAAgBN,CAAhB,MAAuBA,CAAC,GAAG,CAACF,cAAc,CAACS,YAApB,IAAoCP,CAAC,GAAGF,cAAc,CAACS,YAA9E,CAAxB,EAAsH;IAClH,MAAM,IAAIC,KAAJ,CAAUL,YAAV,CAAN;EACH;;EACD,MAAMM,KAAK,GAAG,CAAC,GAAGX,cAAc,CAACY,YAAnB,EAAiCV,CAAjC,CAAd;;EACA,IAAI,CAACI,MAAM,CAACO,SAAP,CAAiBF,KAAjB,CAAL,EAA8B;IAC1B,MAAM,IAAID,KAAJ,CAAUL,YAAV,CAAN;EACH;;EACD,OAAOM,KAAP;AACH;;AACD,SAASG,oBAAT,CAA8BlB,KAA9B,EAAqC;EACjC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EACI,MAAM,IAAIc,KAAJ,CAAU,kBAAV,CAAN;EACJ,OAAO,CAAC,GAAGV,cAAc,CAACY,YAAnB,EAAiChB,KAAjC,CAAP;AACH;;AACD,SAASC,KAAT,GAAiC;EAAA,IAAlBkB,WAAkB,uEAAJ,EAAI;EAC7B,MAAM;IAAEC,iBAAiB,GAAG,KAAtB;IAA6BC,KAAK,GAAG,KAArC;IAA4CC,GAAG,GAAGF,iBAAiB,GAAG,CAAChB,cAAc,CAACS,YAAnB,GAAkCH,MAAM,CAACa,iBAA5G;IAA+HC,GAAG,GAAGJ,iBAAiB,GAAGhB,cAAc,CAACS,YAAlB,GAAiCH,MAAM,CAACe;EAA9L,IAAqNN,WAA3N;EACA,MAAMO,QAAQ,GAAGrB,gBAAgB,CAACiB,GAAD,EAAM,KAAN,CAAjC;EACA,MAAMK,QAAQ,GAAGtB,gBAAgB,CAACmB,GAAD,EAAM,KAAN,CAAjC;;EACA,IAAIE,QAAQ,GAAGC,QAAf,EAAyB;IACrB,MAAM,IAAIb,KAAJ,CAAU,sEAAV,CAAN;EACH;;EACD,IAAIO,KAAJ,EAAW;IACP,OAAO,CAAC,GAAGnB,SAAS,CAAC0B,OAAd,EAAuB;MAAEN,GAAG,EAAEI,QAAP;MAAiBF,GAAG,EAAEG;IAAtB,CAAvB,EAAyDE,GAAzD,CAA6DzB,cAAc,CAAC0B,YAA5E,EAA0FZ,oBAA1F,CAAP;EACH;;EACD,MAAMa,eAAe,GAAGJ,QAAQ,GAAG,CAAX,GAAeD,QAAf,GAA0BA,QAAQ,GAAG,CAA7D;EACA,MAAMM,eAAe,GAAGL,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAG,CAA1B,GAA8BA,QAAtD;EACA,OAAO,CAAC,GAAGzB,SAAS,CAAC0B,OAAd,EAAuB;IAAEN,GAAG,EAAES,eAAP;IAAwBP,GAAG,EAAEQ;EAA7B,CAAvB,EAAuEH,GAAvE,CAA4Ed,KAAD,IAAW;IACzF,IAAIA,KAAK,GAAGY,QAAR,IAAoBZ,KAAK,GAAGW,QAAhC,EACI,OAAOhB,MAAM,CAACuB,GAAd,CADJ,KAGI,OAAO,CAAC,GAAG7B,cAAc,CAAC0B,YAAnB,EAAiCf,KAAjC,CAAP;EACP,CALM,EAKHf,KAAD,IAAW;IACV,IAAI,OAAOA,KAAP,KAAiB,QAArB,EACI,MAAM,IAAIc,KAAJ,CAAU,kBAAV,CAAN;IACJ,IAAIJ,MAAM,CAACC,KAAP,CAAaX,KAAb,CAAJ,EACI,OAAO2B,QAAQ,KAAKK,eAAb,GAA+BA,eAA/B,GAAiDD,eAAxD;IACJ,OAAO,CAAC,GAAG3B,cAAc,CAACY,YAAnB,EAAiChB,KAAjC,CAAP;EACH,CAXM,CAAP;AAYH;;AACDD,OAAO,CAACE,KAAR,GAAgBA,KAAhB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubarrayArbitrary = void 0;\n\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\n\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst IsSubarrayOf_1 = require(\"./helpers/IsSubarrayOf\");\n\nconst IntegerArbitrary_1 = require(\"./IntegerArbitrary\");\n\nclass SubarrayArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(originalArray, isOrdered, minLength, maxLength) {\n    super();\n    this.originalArray = originalArray;\n    this.isOrdered = isOrdered;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    if (minLength < 0 || minLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n    if (maxLength < 0 || maxLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n    if (minLength > maxLength) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n    this.lengthArb = new IntegerArbitrary_1.IntegerArbitrary(minLength, maxLength);\n    this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary_1.IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2))) : this.lengthArb;\n  }\n\n  generate(mrng, biasFactor) {\n    const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n    const size = lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const remainingElements = this.originalArray.map((_v, idx) => idx);\n    const ids = [];\n\n    for (let index = 0; index !== sizeValue; ++index) {\n      const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n      ids.push(remainingElements[selectedIdIndex]);\n      remainingElements.splice(selectedIdIndex, 1);\n    }\n\n    if (this.isOrdered) {\n      ids.sort((a, b) => a - b);\n    }\n\n    return new Value_1.Value(ids.map(i => this.originalArray[i]), size.context);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n\n    if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n      return false;\n    }\n\n    return (0, IsSubarrayOf_1.isSubarrayOf)(this.originalArray, value);\n  }\n\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n\n    return this.lengthArb.shrink(value.length, context).map(newSize => {\n      return new Value_1.Value(value.slice(value.length - newSize.value), newSize.context);\n    }).join(value.length > this.minLength ? (0, LazyIterableIterator_1.makeLazy)(() => this.shrink(value.slice(1), undefined).filter(newValue => this.minLength <= newValue.value.length + 1).map(newValue => new Value_1.Value([value[0]].concat(newValue.value), undefined))) : Stream_1.Stream.nil());\n  }\n\n}\n\nexports.SubarrayArbitrary = SubarrayArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","SubarrayArbitrary","Arbitrary_1","require","Value_1","LazyIterableIterator_1","Stream_1","IsSubarrayOf_1","IntegerArbitrary_1","Arbitrary","constructor","originalArray","isOrdered","minLength","maxLength","length","Error","lengthArb","IntegerArbitrary","biasedLengthArb","Math","floor","log","generate","mrng","biasFactor","undefined","nextInt","size","sizeValue","remainingElements","map","_v","idx","ids","index","selectedIdIndex","push","splice","sort","a","b","Value","i","context","canShrinkWithoutContext","Array","isArray","isSubarrayOf","shrink","Stream","nil","newSize","slice","join","makeLazy","filter","newValue","concat"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/SubarrayArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubarrayArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst IsSubarrayOf_1 = require(\"./helpers/IsSubarrayOf\");\nconst IntegerArbitrary_1 = require(\"./IntegerArbitrary\");\nclass SubarrayArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(originalArray, isOrdered, minLength, maxLength) {\n        super();\n        this.originalArray = originalArray;\n        this.isOrdered = isOrdered;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        if (minLength < 0 || minLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n        if (maxLength < 0 || maxLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n        if (minLength > maxLength)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n        this.lengthArb = new IntegerArbitrary_1.IntegerArbitrary(minLength, maxLength);\n        this.biasedLengthArb =\n            minLength !== maxLength\n                ? new IntegerArbitrary_1.IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2)))\n                : this.lengthArb;\n    }\n    generate(mrng, biasFactor) {\n        const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n        const size = lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const remainingElements = this.originalArray.map((_v, idx) => idx);\n        const ids = [];\n        for (let index = 0; index !== sizeValue; ++index) {\n            const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n            ids.push(remainingElements[selectedIdIndex]);\n            remainingElements.splice(selectedIdIndex, 1);\n        }\n        if (this.isOrdered) {\n            ids.sort((a, b) => a - b);\n        }\n        return new Value_1.Value(ids.map((i) => this.originalArray[i]), size.context);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n            return false;\n        }\n        return (0, IsSubarrayOf_1.isSubarrayOf)(this.originalArray, value);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        return this.lengthArb\n            .shrink(value.length, context)\n            .map((newSize) => {\n            return new Value_1.Value(value.slice(value.length - newSize.value), newSize.context);\n        })\n            .join(value.length > this.minLength\n            ? (0, LazyIterableIterator_1.makeLazy)(() => this.shrink(value.slice(1), undefined)\n                .filter((newValue) => this.minLength <= newValue.value.length + 1)\n                .map((newValue) => new Value_1.Value([value[0]].concat(newValue.value), undefined)))\n            : Stream_1.Stream.nil());\n    }\n}\nexports.SubarrayArbitrary = SubarrayArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
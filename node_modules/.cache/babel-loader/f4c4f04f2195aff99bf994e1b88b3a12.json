{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MixedCaseArbitrary = void 0;\n\nconst bigUintN_1 = require(\"../bigUintN\");\n\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\n\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nconst ToggleFlags_1 = require(\"./helpers/ToggleFlags\");\n\nclass MixedCaseArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(stringArb, toggleCase, untoggleAll) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n    this.untoggleAll = untoggleAll;\n  }\n\n  buildContextFor(rawStringValue, flagsValue) {\n    return {\n      rawString: rawStringValue.value,\n      rawStringContext: rawStringValue.context,\n      flags: flagsValue.value,\n      flagsContext: flagsValue.context\n    };\n  }\n\n  generate(mrng, biasFactor) {\n    const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringValue.value];\n    const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n    const flagsArb = (0, bigUintN_1.bigUintN)(togglePositions.length);\n    const flagsValue = flagsArb.generate(mrng, undefined);\n    (0, ToggleFlags_1.applyFlagsOnChars)(chars, flagsValue.value, togglePositions, this.toggleCase);\n    return new Value_1.Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n  }\n\n  canShrinkWithoutContext(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    let contextSafe;\n\n    if (context !== undefined) {\n      contextSafe = context;\n    } else {\n      if (this.untoggleAll !== undefined) {\n        const untoggledValue = this.untoggleAll(value);\n        const valueChars = [...value];\n        const untoggledValueChars = [...untoggledValue];\n        const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(untoggledValueChars, this.toggleCase);\n        contextSafe = {\n          rawString: untoggledValue,\n          rawStringContext: undefined,\n          flags: (0, ToggleFlags_1.computeFlagsFromChars)(untoggledValueChars, valueChars, togglePositions),\n          flagsContext: undefined\n        };\n      } else {\n        contextSafe = {\n          rawString: value,\n          rawStringContext: undefined,\n          flags: BigInt(0),\n          flagsContext: undefined\n        };\n      }\n    }\n\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringValue => {\n      const nChars = [...nRawStringValue.value];\n      const nTogglePositions = (0, ToggleFlags_1.computeTogglePositions)(nChars, this.toggleCase);\n      const nFlags = (0, ToggleFlags_1.computeNextFlags)(flags, nTogglePositions.length);\n      (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlags, nTogglePositions, this.toggleCase);\n      return new Value_1.Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value_1.Value(nFlags, undefined)));\n    }).join((0, LazyIterableIterator_1.makeLazy)(() => {\n      const chars = [...rawString];\n      const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n      return (0, bigUintN_1.bigUintN)(togglePositions.length).shrink(flags, contextSafe.flagsContext).map(nFlagsValue => {\n        const nChars = chars.slice();\n        (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n        return new Value_1.Value(nChars.join(''), this.buildContextFor(new Value_1.Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n      });\n    }));\n  }\n\n}\n\nexports.MixedCaseArbitrary = MixedCaseArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","MixedCaseArbitrary","bigUintN_1","require","Arbitrary_1","Value_1","LazyIterableIterator_1","ToggleFlags_1","Arbitrary","constructor","stringArb","toggleCase","untoggleAll","buildContextFor","rawStringValue","flagsValue","rawString","rawStringContext","context","flags","flagsContext","generate","mrng","biasFactor","chars","togglePositions","computeTogglePositions","flagsArb","bigUintN","length","undefined","applyFlagsOnChars","Value","join","canShrinkWithoutContext","shrink","contextSafe","untoggledValue","valueChars","untoggledValueChars","computeFlagsFromChars","BigInt","map","nRawStringValue","nChars","nTogglePositions","nFlags","computeNextFlags","makeLazy","nFlagsValue","slice"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/MixedCaseArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MixedCaseArbitrary = void 0;\nconst bigUintN_1 = require(\"../bigUintN\");\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst ToggleFlags_1 = require(\"./helpers/ToggleFlags\");\nclass MixedCaseArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(stringArb, toggleCase, untoggleAll) {\n        super();\n        this.stringArb = stringArb;\n        this.toggleCase = toggleCase;\n        this.untoggleAll = untoggleAll;\n    }\n    buildContextFor(rawStringValue, flagsValue) {\n        return {\n            rawString: rawStringValue.value,\n            rawStringContext: rawStringValue.context,\n            flags: flagsValue.value,\n            flagsContext: flagsValue.context,\n        };\n    }\n    generate(mrng, biasFactor) {\n        const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n        const chars = [...rawStringValue.value];\n        const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n        const flagsArb = (0, bigUintN_1.bigUintN)(togglePositions.length);\n        const flagsValue = flagsArb.generate(mrng, undefined);\n        (0, ToggleFlags_1.applyFlagsOnChars)(chars, flagsValue.value, togglePositions, this.toggleCase);\n        return new Value_1.Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n    }\n    canShrinkWithoutContext(value) {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        return this.untoggleAll !== undefined\n            ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value))\n            :\n                this.stringArb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        let contextSafe;\n        if (context !== undefined) {\n            contextSafe = context;\n        }\n        else {\n            if (this.untoggleAll !== undefined) {\n                const untoggledValue = this.untoggleAll(value);\n                const valueChars = [...value];\n                const untoggledValueChars = [...untoggledValue];\n                const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(untoggledValueChars, this.toggleCase);\n                contextSafe = {\n                    rawString: untoggledValue,\n                    rawStringContext: undefined,\n                    flags: (0, ToggleFlags_1.computeFlagsFromChars)(untoggledValueChars, valueChars, togglePositions),\n                    flagsContext: undefined,\n                };\n            }\n            else {\n                contextSafe = {\n                    rawString: value,\n                    rawStringContext: undefined,\n                    flags: BigInt(0),\n                    flagsContext: undefined,\n                };\n            }\n        }\n        const rawString = contextSafe.rawString;\n        const flags = contextSafe.flags;\n        return this.stringArb\n            .shrink(rawString, contextSafe.rawStringContext)\n            .map((nRawStringValue) => {\n            const nChars = [...nRawStringValue.value];\n            const nTogglePositions = (0, ToggleFlags_1.computeTogglePositions)(nChars, this.toggleCase);\n            const nFlags = (0, ToggleFlags_1.computeNextFlags)(flags, nTogglePositions.length);\n            (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlags, nTogglePositions, this.toggleCase);\n            return new Value_1.Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value_1.Value(nFlags, undefined)));\n        })\n            .join((0, LazyIterableIterator_1.makeLazy)(() => {\n            const chars = [...rawString];\n            const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n            return (0, bigUintN_1.bigUintN)(togglePositions.length)\n                .shrink(flags, contextSafe.flagsContext)\n                .map((nFlagsValue) => {\n                const nChars = chars.slice();\n                (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n                return new Value_1.Value(nChars.join(''), this.buildContextFor(new Value_1.Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n            });\n        }));\n    }\n}\nexports.MixedCaseArbitrary = MixedCaseArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderWithParse5 = exports.parseWithParse5 = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n\nvar parse5_1 = require(\"parse5\");\n\nvar parse5_htmlparser2_tree_adapter_1 = require(\"parse5-htmlparser2-tree-adapter\");\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\n\n\nfunction parseWithParse5(content, options, isDocument, context) {\n  var opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: parse5_htmlparser2_tree_adapter_1.adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  return isDocument ? (0, parse5_1.parse)(content, opts) : (0, parse5_1.parseFragment)(context, content, opts);\n}\n\nexports.parseWithParse5 = parseWithParse5;\nvar renderOpts = {\n  treeAdapter: parse5_htmlparser2_tree_adapter_1.adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\n\nfunction renderWithParse5(dom) {\n  var _a;\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n\n\n  var nodes = 'length' in dom ? dom : [dom];\n\n  for (var index = 0; index < nodes.length; index += 1) {\n    var node = nodes[index];\n\n    if ((0, domhandler_1.isDocument)(node)) {\n      (_a = Array.prototype.splice).call.apply(_a, __spreadArray([nodes, index, 1], node.children, false));\n    }\n  }\n\n  var result = '';\n\n  for (var index = 0; index < nodes.length; index += 1) {\n    var node = nodes[index];\n    result += (0, parse5_1.serializeOuter)(node, renderOpts);\n  }\n\n  return result;\n}\n\nexports.renderWithParse5 = renderWithParse5;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;AAGA;;;;;;;;;;;AASA,SAAgBA,eAAhB,CACEC,OADF,EAEEC,OAFF,EAGEC,UAHF,EAIEC,OAJF,EAI4B;EAE1B,IAAMC,IAAI,GAAG;IACXC,gBAAgB,EACd,OAAOJ,OAAO,CAACI,gBAAf,KAAoC,SAApC,GACIJ,OAAO,CAACI,gBADZ,GAEI,IAJK;IAKXC,WAAW,EAAEC,yCALF;IAMXC,sBAAsB,EAAEP,OAAO,CAACO;EANrB,CAAb;EASA,OAAON,UAAU,GACb,oBAAcF,OAAd,EAAuBI,IAAvB,CADa,GAEb,4BAAcD,OAAd,EAAuBH,OAAvB,EAAgCI,IAAhC,CAFJ;AAGD;;AAlBDK;AAoBA,IAAMC,UAAU,GAAG;EAAEJ,WAAW,EAAEC;AAAf,CAAnB;AAEA;;;;;;;AAMA,SAAgBI,gBAAhB,CAAiCC,GAAjC,EAAkE;;EAChE;;;;;;;EAKA,IAAMC,KAAK,GAAG,YAAYD,GAAZ,GAAkBA,GAAlB,GAAwB,CAACA,GAAD,CAAtC;;EACA,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACE,MAAlC,EAA0CD,KAAK,IAAI,CAAnD,EAAsD;IACpD,IAAME,IAAI,GAAGH,KAAK,CAACC,KAAD,CAAlB;;IACA,IAAI,6BAAWE,IAAX,CAAJ,EAAsB;MACpB,WAAK,CAACC,SAAN,CAAgBC,MAAhB,EAAuBC,IAAvB,CAA2BC,KAA3B,CAA2BC,EAA3B,EAA2BC,eAACT,KAAD,EAAQC,KAAR,EAAe,CAAf,GAAqBE,IAAI,CAACO,QAA1B,EAAkC,KAAlC,CAA3B;IACD;EACF;;EAED,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIV,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACE,MAAlC,EAA0CD,KAAK,IAAI,CAAnD,EAAsD;IACpD,IAAME,IAAI,GAAGH,KAAK,CAACC,KAAD,CAAlB;IACAU,MAAM,IAAI,6BAAeR,IAAf,EAAqBN,UAArB,CAAV;EACD;;EAED,OAAOc,MAAP;AACD;;AArBDf","names":["parseWithParse5","content","options","isDocument","context","opts","scriptingEnabled","treeAdapter","parse5_htmlparser2_tree_adapter_1","sourceCodeLocationInfo","exports","renderOpts","renderWithParse5","dom","nodes","index","length","node","prototype","splice","call","apply","_a","__spreadArray","children","result"],"sources":["parsers/parse5-adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuoteType = void 0;\n\nvar decode_js_1 = require(\"entities/lib/decode.js\");\n\nvar CharCodes;\n\n(function (CharCodes) {\n  CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n  CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n  CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n  CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n  CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n  CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n  CharCodes[CharCodes[\"Num\"] = 35] = \"Num\";\n  CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n  CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n  CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n  CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n  CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n  CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n  CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n  CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n  CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n  CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n  CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n  CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n  CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n  CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n  CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n  CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */\n\n\nvar State;\n\n(function (State) {\n  State[State[\"Text\"] = 1] = \"Text\";\n  State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n  State[State[\"InTagName\"] = 3] = \"InTagName\";\n  State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n  State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n  State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n  State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\"; // Attributes\n\n  State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n  State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n  State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n  State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n  State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n  State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n  State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\"; // Declarations\n\n  State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n  State[State[\"InDeclaration\"] = 16] = \"InDeclaration\"; // Processing instructions\n\n  State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\"; // Comments & CDATA\n\n  State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n  State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n  State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n  State[State[\"InCommentLike\"] = 21] = \"InCommentLike\"; // Special tags\n\n  State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n  State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n  State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n  State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n  State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n  State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n  State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n  State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\n\nfunction isWhitespace(c) {\n  return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\n\nfunction isEndOfTagSection(c) {\n  return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\n\nfunction isNumber(c) {\n  return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\n\nfunction isASCIIAlpha(c) {\n  return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\n\nfunction isHexDigit(c) {\n  return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\n\nvar QuoteType;\n\n(function (QuoteType) {\n  QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n  QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n  QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n  QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\n\n\nvar Sequences = {\n  Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n\n};\n\nvar Tokenizer =\n/** @class */\nfunction () {\n  function Tokenizer(_a, cbs) {\n    var _b = _a.xmlMode,\n        xmlMode = _b === void 0 ? false : _b,\n        _c = _a.decodeEntities,\n        decodeEntities = _c === void 0 ? true : _c;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n\n    this.state = State.Text;\n    /** The read buffer. */\n\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n\n    this.index = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n\n    this.baseState = State.Text;\n    /** For special parsing behavior inside of script and style tags. */\n\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n\n    this.running = true;\n    /** The offset of the current buffer. */\n\n    this.offset = 0;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    /** For named entities, the index of the value. For numeric entities, the code point. */\n\n    this.entityResult = 0;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;\n  }\n\n  Tokenizer.prototype.reset = function () {\n    this.state = State.Text;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = State.Text;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.offset = 0;\n  };\n\n  Tokenizer.prototype.write = function (chunk) {\n    this.offset += this.buffer.length;\n    this.buffer = chunk;\n    this.parse();\n  };\n\n  Tokenizer.prototype.end = function () {\n    if (this.running) this.finish();\n  };\n\n  Tokenizer.prototype.pause = function () {\n    this.running = false;\n  };\n\n  Tokenizer.prototype.resume = function () {\n    this.running = true;\n\n    if (this.index < this.buffer.length + this.offset) {\n      this.parse();\n    }\n  };\n  /**\n   * The current index within all of the written data.\n   */\n\n\n  Tokenizer.prototype.getIndex = function () {\n    return this.index;\n  };\n  /**\n   * The start of the current section.\n   */\n\n\n  Tokenizer.prototype.getSectionStart = function () {\n    return this.sectionStart;\n  };\n\n  Tokenizer.prototype.stateText = function (c) {\n    if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n\n      this.state = State.BeforeTagName;\n      this.sectionStart = this.index;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.state = State.BeforeEntity;\n    }\n  };\n\n  Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n    var isEnd = this.sequenceIndex === this.currentSequence.length;\n    var isMatch = isEnd ? // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) : // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n\n    this.sequenceIndex = 0;\n    this.state = State.InTagName;\n    this.stateInTagName(c);\n  };\n  /** Look for an end tag. For <title> tags, also decode entities. */\n\n\n  Tokenizer.prototype.stateInSpecialTag = function (c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === CharCodes.Gt || isWhitespace(c)) {\n        var endOfText = this.index - this.currentSequence.length;\n\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          var actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n\n      this.sequenceIndex = 0;\n    }\n\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === CharCodes.Amp) {\n          this.state = State.BeforeEntity;\n        }\n      } else if (this.fastForwardTo(CharCodes.Lt)) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === CharCodes.Lt);\n    }\n  };\n\n  Tokenizer.prototype.stateCDATASequence = function (c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = State.InCommentLike;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = State.InDeclaration;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  };\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n\n\n  Tokenizer.prototype.fastForwardTo = function (c) {\n    while (++this.index < this.buffer.length + this.offset) {\n      if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n\n\n    this.index = this.buffer.length + this.offset - 1;\n    return false;\n  };\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n\n\n  Tokenizer.prototype.stateInCommentLike = function (c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index, 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index, 2);\n        }\n\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = State.Text;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  };\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n\n\n  Tokenizer.prototype.isTagStartChar = function (c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  };\n\n  Tokenizer.prototype.startSpecial = function (sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this.state = State.SpecialStartSequence;\n  };\n\n  Tokenizer.prototype.stateBeforeTagName = function (c) {\n    if (c === CharCodes.ExclamationMark) {\n      this.state = State.BeforeDeclaration;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Questionmark) {\n      this.state = State.InProcessingInstruction;\n      this.sectionStart = this.index + 1;\n    } else if (this.isTagStartChar(c)) {\n      var lower = c | 0x20;\n      this.sectionStart = this.index;\n\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n      }\n    } else if (c === CharCodes.Slash) {\n      this.state = State.BeforeClosingTagName;\n    } else {\n      this.state = State.Text;\n      this.stateText(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInTagName = function (c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n    if (isWhitespace(c)) {// Ignore\n    } else if (c === CharCodes.Gt) {\n      this.state = State.Text;\n    } else {\n      this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n      this.sectionStart = this.index;\n    }\n  };\n\n  Tokenizer.prototype.stateInClosingTagName = function (c) {\n    if (c === CharCodes.Gt || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterClosingTagName;\n      this.stateAfterClosingTagName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n    // Skip everything until \">\"\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onopentagend(this.index);\n\n      if (this.isSpecial) {\n        this.state = State.InSpecialTag;\n        this.sequenceIndex = 0;\n      } else {\n        this.state = State.Text;\n      }\n\n      this.baseState = this.state;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Slash) {\n      this.state = State.InSelfClosingTag;\n    } else if (!isWhitespace(c)) {\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  };\n\n  Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n      this.isSpecial = false; // Reset special state, in case of self-closing special tags\n    } else if (!isWhitespace(c)) {\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeName = function (c) {\n    if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterAttributeName;\n      this.stateAfterAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateAfterAttributeName = function (c) {\n    if (c === CharCodes.Eq) {\n      this.state = State.BeforeAttributeValue;\n    } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n    if (c === CharCodes.DoubleQuote) {\n      this.state = State.InAttributeValueDq;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.SingleQuote) {\n      this.state = State.InAttributeValueSq;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = State.InAttributeValueNq;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  };\n\n  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n      this.state = State.BeforeAttributeName;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n    this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n  };\n\n  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n    this.handleInAttributeValue(c, CharCodes.SingleQuote);\n  };\n\n  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n    if (isWhitespace(c) || c === CharCodes.Gt) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(QuoteType.Unquoted, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n    if (c === CharCodes.OpeningSquareBracket) {\n      this.state = State.CDATASequence;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n    }\n  };\n\n  Tokenizer.prototype.stateInDeclaration = function (c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.ondeclaration(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeComment = function (c) {\n    if (c === CharCodes.Dash) {\n      this.state = State.InCommentLike;\n      this.currentSequence = Sequences.CommentEnd; // Allow short comments (eg. <!-->)\n\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = State.InDeclaration;\n    }\n  };\n\n  Tokenizer.prototype.stateInSpecialComment = function (c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.oncomment(this.sectionStart, this.index, 0);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n    var lower = c | 0x20;\n\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = State.InTagName;\n      this.stateInTagName(c); // Consume the token again\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeEntity = function (c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n    this.entityResult = 0;\n\n    if (c === CharCodes.Num) {\n      this.state = State.BeforeNumericEntity;\n    } else if (c === CharCodes.Amp) {// We have two `&` characters in a row. Stay in the current state.\n    } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.state = State.InNamedEntity;\n      this.stateInNamedEntity(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInNamedEntity = function (c) {\n    this.entityExcess += 1;\n    this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this.index--;\n      return;\n    }\n\n    this.trieCurrent = this.entityTrie[this.trieIndex];\n    var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH; // If the branch is a value, store it and continue\n\n    if (masked) {\n      // The mask is the number of bytes of the value, including the current byte.\n      var valueLength = (masked >> 14) - 1; // If we have a legacy entity while parsing strictly, just skip the number of bytes\n\n      if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n        this.trieIndex += valueLength;\n      } else {\n        // Add 1 as we have already incremented the excess\n        var entityStart = this.index - this.entityExcess + 1;\n\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.sectionStart, entityStart);\n        } // If this is a surrogate pair, consume the next two bytes\n\n\n        this.entityResult = this.trieIndex;\n        this.trieIndex += valueLength;\n        this.entityExcess = 0;\n        this.sectionStart = this.index + 1;\n\n        if (valueLength === 0) {\n          this.emitNamedEntity();\n        }\n      }\n    }\n  };\n\n  Tokenizer.prototype.emitNamedEntity = function () {\n    this.state = this.baseState;\n\n    if (this.entityResult === 0) {\n      return;\n    }\n\n    var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;\n\n    switch (valueLength) {\n      case 1:\n        this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);\n        break;\n\n      case 2:\n        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n        break;\n\n      case 3:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n        }\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n    if ((c | 0x20) === CharCodes.LowerX) {\n      this.entityExcess++;\n      this.state = State.InHexEntity;\n    } else {\n      this.state = State.InNumericEntity;\n      this.stateInNumericEntity(c);\n    }\n  };\n\n  Tokenizer.prototype.emitNumericEntity = function (strict) {\n    var entityStart = this.index - this.entityExcess - 1;\n    var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n\n    if (numberStart !== this.index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.sectionStart, entityStart);\n      }\n\n      this.sectionStart = this.index + Number(strict);\n      this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));\n    }\n\n    this.state = this.baseState;\n  };\n\n  Tokenizer.prototype.stateInNumericEntity = function (c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n\n      this.index--;\n    }\n  };\n\n  Tokenizer.prototype.stateInHexEntity = function (c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else if (isHexDigit(c)) {\n      this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n\n      this.index--;\n    }\n  };\n\n  Tokenizer.prototype.allowLegacyEntity = function () {\n    return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n  };\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n\n\n  Tokenizer.prototype.cleanup = function () {\n    // If we are inside of text or attributes, emit what we already have.\n    if (this.running && this.sectionStart !== this.index) {\n      if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  };\n\n  Tokenizer.prototype.shouldContinue = function () {\n    return this.index < this.buffer.length + this.offset && this.running;\n  };\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n\n\n  Tokenizer.prototype.parse = function () {\n    while (this.shouldContinue()) {\n      var c = this.buffer.charCodeAt(this.index - this.offset);\n\n      if (this.state === State.Text) {\n        this.stateText(c);\n      } else if (this.state === State.SpecialStartSequence) {\n        this.stateSpecialStartSequence(c);\n      } else if (this.state === State.InSpecialTag) {\n        this.stateInSpecialTag(c);\n      } else if (this.state === State.CDATASequence) {\n        this.stateCDATASequence(c);\n      } else if (this.state === State.InAttributeValueDq) {\n        this.stateInAttributeValueDoubleQuotes(c);\n      } else if (this.state === State.InAttributeName) {\n        this.stateInAttributeName(c);\n      } else if (this.state === State.InCommentLike) {\n        this.stateInCommentLike(c);\n      } else if (this.state === State.InSpecialComment) {\n        this.stateInSpecialComment(c);\n      } else if (this.state === State.BeforeAttributeName) {\n        this.stateBeforeAttributeName(c);\n      } else if (this.state === State.InTagName) {\n        this.stateInTagName(c);\n      } else if (this.state === State.InClosingTagName) {\n        this.stateInClosingTagName(c);\n      } else if (this.state === State.BeforeTagName) {\n        this.stateBeforeTagName(c);\n      } else if (this.state === State.AfterAttributeName) {\n        this.stateAfterAttributeName(c);\n      } else if (this.state === State.InAttributeValueSq) {\n        this.stateInAttributeValueSingleQuotes(c);\n      } else if (this.state === State.BeforeAttributeValue) {\n        this.stateBeforeAttributeValue(c);\n      } else if (this.state === State.BeforeClosingTagName) {\n        this.stateBeforeClosingTagName(c);\n      } else if (this.state === State.AfterClosingTagName) {\n        this.stateAfterClosingTagName(c);\n      } else if (this.state === State.BeforeSpecialS) {\n        this.stateBeforeSpecialS(c);\n      } else if (this.state === State.InAttributeValueNq) {\n        this.stateInAttributeValueNoQuotes(c);\n      } else if (this.state === State.InSelfClosingTag) {\n        this.stateInSelfClosingTag(c);\n      } else if (this.state === State.InDeclaration) {\n        this.stateInDeclaration(c);\n      } else if (this.state === State.BeforeDeclaration) {\n        this.stateBeforeDeclaration(c);\n      } else if (this.state === State.BeforeComment) {\n        this.stateBeforeComment(c);\n      } else if (this.state === State.InProcessingInstruction) {\n        this.stateInProcessingInstruction(c);\n      } else if (this.state === State.InNamedEntity) {\n        this.stateInNamedEntity(c);\n      } else if (this.state === State.BeforeEntity) {\n        this.stateBeforeEntity(c);\n      } else if (this.state === State.InHexEntity) {\n        this.stateInHexEntity(c);\n      } else if (this.state === State.InNumericEntity) {\n        this.stateInNumericEntity(c);\n      } else {\n        // `this._state === State.BeforeNumericEntity`\n        this.stateBeforeNumericEntity(c);\n      }\n\n      this.index++;\n    }\n\n    this.cleanup();\n  };\n\n  Tokenizer.prototype.finish = function () {\n    if (this.state === State.InNamedEntity) {\n      this.emitNamedEntity();\n    } // If there is remaining data, emit it in a reasonable way\n\n\n    if (this.sectionStart < this.index) {\n      this.handleTrailingData();\n    }\n\n    this.cbs.onend();\n  };\n  /** Handle any trailing data. */\n\n\n  Tokenizer.prototype.handleTrailingData = function () {\n    var endIndex = this.buffer.length + this.offset;\n\n    if (this.state === State.InCommentLike) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex, 0);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex, 0);\n      }\n    } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false); // All trailing data will have been consumed\n    } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false); // All trailing data will have been consumed\n    } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n      /*\n       * If we are currently in an opening or closing tag, us not calling the\n       * respective callback signals that the tag should be ignored.\n       */\n    } else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  };\n\n  Tokenizer.prototype.emitPartial = function (start, endIndex) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribdata(start, endIndex);\n    } else {\n      this.cbs.ontext(start, endIndex);\n    }\n  };\n\n  Tokenizer.prototype.emitCodePoint = function (cp) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribentity(cp);\n    } else {\n      this.cbs.ontextentity(cp);\n    }\n  };\n\n  return Tokenizer;\n}();\n\nexports.default = Tokenizer;","map":{"version":3,"mappings":"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","names":["CharCodes","State","isWhitespace","c","Space","NewLine","Tab","FormFeed","CarriageReturn","isEndOfTagSection","Slash","Gt","isNumber","Zero","Nine","isASCIIAlpha","LowerA","LowerZ","UpperA","UpperZ","isHexDigit","UpperF","LowerF","QuoteType","exports","Sequences","Cdata","Uint8Array","CdataEnd","CommentEnd","ScriptEnd","StyleEnd","TitleEnd","_a","cbs","_b","xmlMode","_c","decodeEntities","Text","entityTrie","decode_js_1","Tokenizer","state","buffer","sectionStart","index","baseState","currentSequence","undefined","running","offset","chunk","length","parse","finish","Lt","fastForwardTo","ontext","BeforeTagName","Amp","BeforeEntity","isEnd","sequenceIndex","isMatch","isSpecial","InTagName","stateInTagName","endOfText","actualIndex","stateInClosingTagName","Number","InCommentLike","InDeclaration","stateInDeclaration","charCodeAt","oncdata","oncomment","sequence","SpecialStartSequence","ExclamationMark","BeforeDeclaration","Questionmark","InProcessingInstruction","isTagStartChar","lower","startSpecial","BeforeSpecialS","BeforeClosingTagName","stateText","onopentagname","BeforeAttributeName","stateBeforeAttributeName","InClosingTagName","InSpecialComment","onclosetag","AfterClosingTagName","stateAfterClosingTagName","onopentagend","InSpecialTag","InSelfClosingTag","InAttributeName","onselfclosingtag","Eq","onattribname","AfterAttributeName","stateAfterAttributeName","BeforeAttributeValue","onattribend","NoValue","DoubleQuote","InAttributeValueDq","SingleQuote","InAttributeValueSq","InAttributeValueNq","stateInAttributeValueNoQuotes","quote","onattribdata","Double","Single","handleInAttributeValue","Unquoted","OpeningSquareBracket","CDATASequence","Dash","BeforeComment","ondeclaration","onprocessinginstruction","entityExcess","entityResult","Num","BeforeNumericEntity","trieIndex","trieCurrent","InNamedEntity","stateInNamedEntity","emitNamedEntity","masked","VALUE_LENGTH","valueLength","allowLegacyEntity","Semi","entityStart","emitPartial","emitCodePoint","LowerX","InHexEntity","InNumericEntity","stateInNumericEntity","strict","numberStart","emitNumericEntity","shouldContinue","stateSpecialStartSequence","stateInSpecialTag","stateCDATASequence","stateInAttributeValueDoubleQuotes","stateInAttributeName","stateInCommentLike","stateInSpecialComment","stateBeforeTagName","stateInAttributeValueSingleQuotes","stateBeforeAttributeValue","stateBeforeClosingTagName","stateBeforeSpecialS","stateInSelfClosingTag","stateBeforeDeclaration","stateBeforeComment","stateInProcessingInstruction","stateBeforeEntity","stateInHexEntity","stateBeforeNumericEntity","cleanup","handleTrailingData","onend","endIndex","start","cp","onattribentity","ontextentity"],"sources":["Tokenizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexToFloat = exports.floatToIndex = exports.decomposeFloat = exports.EPSILON_32 = exports.MAX_VALUE_32 = exports.MIN_VALUE_32 = void 0;\nexports.MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexports.MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexports.EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\n\nfunction decomposeFloat(f) {\n  const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n\n  for (let exponent = -126; exponent !== 128; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n\n    if (Math.abs(f) <= maxForExponent) {\n      return {\n        exponent,\n        significand: f / powExponent\n      };\n    }\n  }\n\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\n\nexports.decomposeFloat = decomposeFloat;\n\nfunction indexInFloatFromDecomp(exponent, significand) {\n  if (exponent === -126) {\n    return significand * 0x800000;\n  }\n\n  return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\n\nfunction floatToIndex(f) {\n  if (f === Number.POSITIVE_INFINITY) {\n    return INDEX_POSITIVE_INFINITY;\n  }\n\n  if (f === Number.NEGATIVE_INFINITY) {\n    return INDEX_NEGATIVE_INFINITY;\n  }\n\n  const decomp = decomposeFloat(f);\n  const exponent = decomp.exponent;\n  const significand = decomp.significand;\n\n  if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n    return Number.NaN;\n  }\n\n  if (f > 0 || f === 0 && 1 / f === Number.POSITIVE_INFINITY) {\n    return indexInFloatFromDecomp(exponent, significand);\n  } else {\n    return -indexInFloatFromDecomp(exponent, -significand) - 1;\n  }\n}\n\nexports.floatToIndex = floatToIndex;\n\nfunction indexToFloat(index) {\n  if (index < 0) {\n    return -indexToFloat(-index - 1);\n  }\n\n  if (index === INDEX_POSITIVE_INFINITY) {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  if (index < 0x1000000) {\n    return index * 2 ** -149;\n  }\n\n  const postIndex = index - 0x1000000;\n  const exponent = -125 + (postIndex >> 23);\n  const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n  return significand * 2 ** exponent;\n}\n\nexports.indexToFloat = indexToFloat;","map":{"version":3,"names":["Object","defineProperty","exports","value","indexToFloat","floatToIndex","decomposeFloat","EPSILON_32","MAX_VALUE_32","MIN_VALUE_32","INDEX_POSITIVE_INFINITY","INDEX_NEGATIVE_INFINITY","f","maxSignificand","exponent","powExponent","maxForExponent","Math","abs","significand","Number","NaN","indexInFloatFromDecomp","POSITIVE_INFINITY","NEGATIVE_INFINITY","decomp","isNaN","isInteger","index","postIndex"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/helpers/FloatHelpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.indexToFloat = exports.floatToIndex = exports.decomposeFloat = exports.EPSILON_32 = exports.MAX_VALUE_32 = exports.MIN_VALUE_32 = void 0;\nexports.MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexports.MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexports.EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\nfunction decomposeFloat(f) {\n    const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n    for (let exponent = -126; exponent !== 128; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(f) <= maxForExponent) {\n            return { exponent, significand: f / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nexports.decomposeFloat = decomposeFloat;\nfunction indexInFloatFromDecomp(exponent, significand) {\n    if (exponent === -126) {\n        return significand * 0x800000;\n    }\n    return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\nfunction floatToIndex(f) {\n    if (f === Number.POSITIVE_INFINITY) {\n        return INDEX_POSITIVE_INFINITY;\n    }\n    if (f === Number.NEGATIVE_INFINITY) {\n        return INDEX_NEGATIVE_INFINITY;\n    }\n    const decomp = decomposeFloat(f);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n        return Number.NaN;\n    }\n    if (f > 0 || (f === 0 && 1 / f === Number.POSITIVE_INFINITY)) {\n        return indexInFloatFromDecomp(exponent, significand);\n    }\n    else {\n        return -indexInFloatFromDecomp(exponent, -significand) - 1;\n    }\n}\nexports.floatToIndex = floatToIndex;\nfunction indexToFloat(index) {\n    if (index < 0) {\n        return -indexToFloat(-index - 1);\n    }\n    if (index === INDEX_POSITIVE_INFINITY) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index < 0x1000000) {\n        return index * 2 ** -149;\n    }\n    const postIndex = index - 0x1000000;\n    const exponent = -125 + (postIndex >> 23);\n    const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n    return significand * 2 ** exponent;\n}\nexports.indexToFloat = indexToFloat;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACM,YAAR,GAAuBN,OAAO,CAACO,YAAR,GAAuB,KAAK,CAA/I;AACAP,OAAO,CAACO,YAAR,GAAuB,KAAK,CAAC,GAAN,GAAY,KAAK,CAAC,EAAzC;AACAP,OAAO,CAACM,YAAR,GAAuB,KAAK,GAAL,IAAY,IAAI,CAAC,KAAK,EAAL,GAAU,CAAX,IAAgB,KAAK,EAArC,CAAvB;AACAN,OAAO,CAACK,UAAR,GAAqB,KAAK,CAAC,EAA3B;AACA,MAAMG,uBAAuB,GAAG,UAAhC;AACA,MAAMC,uBAAuB,GAAG,CAAC,UAAjC;;AACA,SAASL,cAAT,CAAwBM,CAAxB,EAA2B;EACvB,MAAMC,cAAc,GAAG,IAAI,CAAC,KAAK,EAAL,GAAU,CAAX,IAAgB,KAAK,EAAhD;;EACA,KAAK,IAAIC,QAAQ,GAAG,CAAC,GAArB,EAA0BA,QAAQ,KAAK,GAAvC,EAA4C,EAAEA,QAA9C,EAAwD;IACpD,MAAMC,WAAW,GAAG,KAAKD,QAAzB;IACA,MAAME,cAAc,GAAGH,cAAc,GAAGE,WAAxC;;IACA,IAAIE,IAAI,CAACC,GAAL,CAASN,CAAT,KAAeI,cAAnB,EAAmC;MAC/B,OAAO;QAAEF,QAAF;QAAYK,WAAW,EAAEP,CAAC,GAAGG;MAA7B,CAAP;IACH;EACJ;;EACD,OAAO;IAAED,QAAQ,EAAEM,MAAM,CAACC,GAAnB;IAAwBF,WAAW,EAAEC,MAAM,CAACC;EAA5C,CAAP;AACH;;AACDnB,OAAO,CAACI,cAAR,GAAyBA,cAAzB;;AACA,SAASgB,sBAAT,CAAgCR,QAAhC,EAA0CK,WAA1C,EAAuD;EACnD,IAAIL,QAAQ,KAAK,CAAC,GAAlB,EAAuB;IACnB,OAAOK,WAAW,GAAG,QAArB;EACH;;EACD,OAAO,CAACL,QAAQ,GAAG,GAAZ,IAAmB,QAAnB,GAA8B,CAACK,WAAW,GAAG,CAAf,IAAoB,QAAzD;AACH;;AACD,SAASd,YAAT,CAAsBO,CAAtB,EAAyB;EACrB,IAAIA,CAAC,KAAKQ,MAAM,CAACG,iBAAjB,EAAoC;IAChC,OAAOb,uBAAP;EACH;;EACD,IAAIE,CAAC,KAAKQ,MAAM,CAACI,iBAAjB,EAAoC;IAChC,OAAOb,uBAAP;EACH;;EACD,MAAMc,MAAM,GAAGnB,cAAc,CAACM,CAAD,CAA7B;EACA,MAAME,QAAQ,GAAGW,MAAM,CAACX,QAAxB;EACA,MAAMK,WAAW,GAAGM,MAAM,CAACN,WAA3B;;EACA,IAAIC,MAAM,CAACM,KAAP,CAAaZ,QAAb,KAA0BM,MAAM,CAACM,KAAP,CAAaP,WAAb,CAA1B,IAAuD,CAACC,MAAM,CAACO,SAAP,CAAiBR,WAAW,GAAG,QAA/B,CAA5D,EAAsG;IAClG,OAAOC,MAAM,CAACC,GAAd;EACH;;EACD,IAAIT,CAAC,GAAG,CAAJ,IAAUA,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAUQ,MAAM,CAACG,iBAA1C,EAA8D;IAC1D,OAAOD,sBAAsB,CAACR,QAAD,EAAWK,WAAX,CAA7B;EACH,CAFD,MAGK;IACD,OAAO,CAACG,sBAAsB,CAACR,QAAD,EAAW,CAACK,WAAZ,CAAvB,GAAkD,CAAzD;EACH;AACJ;;AACDjB,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AACA,SAASD,YAAT,CAAsBwB,KAAtB,EAA6B;EACzB,IAAIA,KAAK,GAAG,CAAZ,EAAe;IACX,OAAO,CAACxB,YAAY,CAAC,CAACwB,KAAD,GAAS,CAAV,CAApB;EACH;;EACD,IAAIA,KAAK,KAAKlB,uBAAd,EAAuC;IACnC,OAAOU,MAAM,CAACG,iBAAd;EACH;;EACD,IAAIK,KAAK,GAAG,SAAZ,EAAuB;IACnB,OAAOA,KAAK,GAAG,KAAK,CAAC,GAArB;EACH;;EACD,MAAMC,SAAS,GAAGD,KAAK,GAAG,SAA1B;EACA,MAAMd,QAAQ,GAAG,CAAC,GAAD,IAAQe,SAAS,IAAI,EAArB,CAAjB;EACA,MAAMV,WAAW,GAAG,IAAI,CAACU,SAAS,GAAG,QAAb,IAAyB,QAAjD;EACA,OAAOV,WAAW,GAAG,KAAKL,QAA1B;AACH;;AACDZ,OAAO,CAACE,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integer = void 0;\n\nconst IntegerArbitrary_1 = require(\"./_internals/IntegerArbitrary\");\n\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\n\nfunction integer() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fullConstraints = buildCompleteIntegerConstraints(constraints);\n\n  if (fullConstraints.min > fullConstraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n\n  if (!Number.isInteger(fullConstraints.min)) {\n    throw new Error('fc.integer minimum value should be an integer');\n  }\n\n  if (!Number.isInteger(fullConstraints.max)) {\n    throw new Error('fc.integer maximum value should be an integer');\n  }\n\n  return new IntegerArbitrary_1.IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\n\nexports.integer = integer;","map":{"version":3,"names":["Object","defineProperty","exports","value","integer","IntegerArbitrary_1","require","buildCompleteIntegerConstraints","constraints","min","undefined","max","fullConstraints","Error","Number","isInteger","IntegerArbitrary"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/integer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.integer = void 0;\nconst IntegerArbitrary_1 = require(\"./_internals/IntegerArbitrary\");\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nfunction integer(constraints = {}) {\n    const fullConstraints = buildCompleteIntegerConstraints(constraints);\n    if (fullConstraints.min > fullConstraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!Number.isInteger(fullConstraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!Number.isInteger(fullConstraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    return new IntegerArbitrary_1.IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\nexports.integer = integer;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,+BAAD,CAAlC;;AACA,SAASC,+BAAT,CAAyCC,WAAzC,EAAsD;EAClD,MAAMC,GAAG,GAAGD,WAAW,CAACC,GAAZ,KAAoBC,SAApB,GAAgCF,WAAW,CAACC,GAA5C,GAAkD,CAAC,UAA/D;EACA,MAAME,GAAG,GAAGH,WAAW,CAACG,GAAZ,KAAoBD,SAApB,GAAgCF,WAAW,CAACG,GAA5C,GAAkD,UAA9D;EACA,OAAO;IAAEF,GAAF;IAAOE;EAAP,CAAP;AACH;;AACD,SAASP,OAAT,GAAmC;EAAA,IAAlBI,WAAkB,uEAAJ,EAAI;EAC/B,MAAMI,eAAe,GAAGL,+BAA+B,CAACC,WAAD,CAAvD;;EACA,IAAII,eAAe,CAACH,GAAhB,GAAsBG,eAAe,CAACD,GAA1C,EAA+C;IAC3C,MAAM,IAAIE,KAAJ,CAAU,0EAAV,CAAN;EACH;;EACD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,eAAe,CAACH,GAAjC,CAAL,EAA4C;IACxC,MAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;EACH;;EACD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,eAAe,CAACD,GAAjC,CAAL,EAA4C;IACxC,MAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;EACH;;EACD,OAAO,IAAIR,kBAAkB,CAACW,gBAAvB,CAAwCJ,eAAe,CAACH,GAAxD,EAA6DG,eAAe,CAACD,GAA7E,CAAP;AACH;;AACDT,OAAO,CAACE,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}
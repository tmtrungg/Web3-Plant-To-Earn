{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeOuter = exports.serialize = void 0;\n\nconst html_js_1 = require(\"../common/html.js\");\n\nconst escape_js_1 = require(\"entities/lib/escape.js\");\n\nconst default_js_1 = require(\"../tree-adapters/default.js\"); // Sets\n\n\nconst VOID_ELEMENTS = new Set([html_js_1.TAG_NAMES.AREA, html_js_1.TAG_NAMES.BASE, html_js_1.TAG_NAMES.BASEFONT, html_js_1.TAG_NAMES.BGSOUND, html_js_1.TAG_NAMES.BR, html_js_1.TAG_NAMES.COL, html_js_1.TAG_NAMES.EMBED, html_js_1.TAG_NAMES.FRAME, html_js_1.TAG_NAMES.HR, html_js_1.TAG_NAMES.IMG, html_js_1.TAG_NAMES.INPUT, html_js_1.TAG_NAMES.KEYGEN, html_js_1.TAG_NAMES.LINK, html_js_1.TAG_NAMES.META, html_js_1.TAG_NAMES.PARAM, html_js_1.TAG_NAMES.SOURCE, html_js_1.TAG_NAMES.TRACK, html_js_1.TAG_NAMES.WBR]);\n\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\n\nconst defaultOpts = {\n  treeAdapter: default_js_1.defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\n\nfunction serialize(node, options) {\n  const opts = Object.assign(Object.assign({}, defaultOpts), options);\n\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n\n  return serializeChildNodes(node, opts);\n}\n\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\n\nfunction serializeOuter(node, options) {\n  const opts = Object.assign(Object.assign({}, defaultOpts), options);\n  return serializeNode(node, opts);\n}\n\nexports.serializeOuter = serializeOuter;\n\nfunction serializeChildNodes(parentNode, options) {\n  let html = ''; // Get container of the child nodes\n\n  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  const childNodes = options.treeAdapter.getChildNodes(container);\n\n  if (childNodes) {\n    for (const currentNode of childNodes) {\n      html += serializeNode(currentNode, options);\n    }\n  }\n\n  return html;\n}\n\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  } // Return an empty string for unknown nodes\n\n\n  return '';\n}\n\nfunction serializeElement(node, options) {\n  const tn = options.treeAdapter.getTagName(node);\n  return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\n\nfunction serializeAttributes(node, _ref) {\n  let {\n    treeAdapter\n  } = _ref;\n  let html = '';\n\n  for (const attr of treeAdapter.getAttrList(node)) {\n    html += ' ';\n\n    if (!attr.namespace) {\n      html += attr.name;\n    } else switch (attr.namespace) {\n      case html_js_1.NS.XML:\n        {\n          html += `xml:${attr.name}`;\n          break;\n        }\n\n      case html_js_1.NS.XMLNS:\n        {\n          if (attr.name !== 'xmlns') {\n            html += 'xmlns:';\n          }\n\n          html += attr.name;\n          break;\n        }\n\n      case html_js_1.NS.XLINK:\n        {\n          html += `xlink:${attr.name}`;\n          break;\n        }\n\n      default:\n        {\n          html += `${attr.prefix}:${attr.name}`;\n        }\n    }\n\n    html += `=\"${(0, escape_js_1.escapeAttribute)(attr.value)}\"`;\n  }\n\n  return html;\n}\n\nfunction serializeTextNode(node, options) {\n  const {\n    treeAdapter\n  } = options;\n  const content = treeAdapter.getTextNodeContent(node);\n  const parent = treeAdapter.getParentNode(node);\n  const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML && (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled) ? content : (0, escape_js_1.escapeText)(content);\n}\n\nfunction serializeCommentNode(node, _ref2) {\n  let {\n    treeAdapter\n  } = _ref2;\n  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\n\nfunction serializeDocumentTypeNode(node, _ref3) {\n  let {\n    treeAdapter\n  } = _ref3;\n  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","serializeOuter","serialize","html_js_1","require","escape_js_1","default_js_1","VOID_ELEMENTS","Set","TAG_NAMES","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","NS","HTML","has","getTagName","defaultOpts","defaultTreeAdapter","scriptingEnabled","opts","assign","serializeChildNodes","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","serializeAttributes","attr","getAttrList","namespace","name","XML","XMLNS","XLINK","prefix","escapeAttribute","content","getTextNodeContent","parent","getParentNode","parentTn","hasUnescapedText","escapeText","getCommentNodeContent","getDocumentTypeNodeName"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/cheerio/node_modules/parse5/dist/cjs/serializer/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeOuter = exports.serialize = void 0;\nconst html_js_1 = require(\"../common/html.js\");\nconst escape_js_1 = require(\"entities/lib/escape.js\");\nconst default_js_1 = require(\"../tree-adapters/default.js\");\n// Sets\nconst VOID_ELEMENTS = new Set([\n    html_js_1.TAG_NAMES.AREA,\n    html_js_1.TAG_NAMES.BASE,\n    html_js_1.TAG_NAMES.BASEFONT,\n    html_js_1.TAG_NAMES.BGSOUND,\n    html_js_1.TAG_NAMES.BR,\n    html_js_1.TAG_NAMES.COL,\n    html_js_1.TAG_NAMES.EMBED,\n    html_js_1.TAG_NAMES.FRAME,\n    html_js_1.TAG_NAMES.HR,\n    html_js_1.TAG_NAMES.IMG,\n    html_js_1.TAG_NAMES.INPUT,\n    html_js_1.TAG_NAMES.KEYGEN,\n    html_js_1.TAG_NAMES.LINK,\n    html_js_1.TAG_NAMES.META,\n    html_js_1.TAG_NAMES.PARAM,\n    html_js_1.TAG_NAMES.SOURCE,\n    html_js_1.TAG_NAMES.TRACK,\n    html_js_1.TAG_NAMES.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: default_js_1.defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serialize(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serializeOuter(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    return serializeNode(node, opts);\n}\nexports.serializeOuter = serializeOuter;\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case html_js_1.NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case html_js_1.NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case html_js_1.NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${(0, escape_js_1.escapeAttribute)(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML &&\n        (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled)\n        ? content\n        : (0, escape_js_1.escapeText)(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}
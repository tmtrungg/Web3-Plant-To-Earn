{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandsArbitrary = void 0;\n\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\n\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\n\nconst CommandsIterable_1 = require(\"../../check/model/commands/CommandsIterable\");\n\nconst CommandWrapper_1 = require(\"../../check/model/commands/CommandWrapper\");\n\nconst ReplayPath_1 = require(\"../../check/model/ReplayPath\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst oneof_1 = require(\"../oneof\");\n\nconst RestrictedIntegerArbitraryBuilder_1 = require(\"./builders/RestrictedIntegerArbitraryBuilder\");\n\nclass CommandsArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n    super();\n    this.sourceReplayPath = sourceReplayPath;\n    this.disableReplayLog = disableReplayLog;\n    this.oneCommandArb = (0, oneof_1.oneof)(...commandArbs).map(c => new CommandWrapper_1.CommandWrapper(c));\n    this.lengthArb = (0, RestrictedIntegerArbitraryBuilder_1.restrictedIntegerArbitraryBuilder)(0, maxGeneratedCommands, maxCommands);\n    this.replayPath = [];\n    this.replayPathPosition = 0;\n  }\n\n  metadataForReplay() {\n    return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath_1.ReplayPath.stringify(this.replayPath))}`;\n  }\n\n  buildValueFor(items, shrunkOnce) {\n    const commands = items.map(item => item.value_);\n    const context = {\n      shrunkOnce,\n      items\n    };\n    return new Value_1.Value(new CommandsIterable_1.CommandsIterable(commands, () => this.metadataForReplay()), context);\n  }\n\n  generate(mrng) {\n    const size = this.lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const items = Array(sizeValue);\n\n    for (let idx = 0; idx !== sizeValue; ++idx) {\n      const item = this.oneCommandArb.generate(mrng, undefined);\n      items[idx] = item;\n    }\n\n    this.replayPathPosition = 0;\n    return this.buildValueFor(items, false);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  filterOnExecution(itemsRaw) {\n    const items = [];\n\n    for (const c of itemsRaw) {\n      if (c.value_.hasRan) {\n        this.replayPath.push(true);\n        items.push(c);\n      } else this.replayPath.push(false);\n    }\n\n    return items;\n  }\n\n  filterOnReplay(itemsRaw) {\n    return itemsRaw.filter((c, idx) => {\n      const state = this.replayPath[this.replayPathPosition + idx];\n      if (state === undefined) throw new Error(`Too short replayPath`);\n      if (!state && c.value_.hasRan) throw new Error(`Mismatch between replayPath and real execution`);\n      return state;\n    });\n  }\n\n  filterForShrinkImpl(itemsRaw) {\n    if (this.replayPathPosition === 0) {\n      this.replayPath = this.sourceReplayPath !== null ? ReplayPath_1.ReplayPath.parse(this.sourceReplayPath) : [];\n    }\n\n    const items = this.replayPathPosition < this.replayPath.length ? this.filterOnReplay(itemsRaw) : this.filterOnExecution(itemsRaw);\n    this.replayPathPosition += itemsRaw.length;\n    return items;\n  }\n\n  shrink(_value, context) {\n    if (context === undefined) {\n      return Stream_1.Stream.nil();\n    }\n\n    const safeContext = context;\n    const shrunkOnce = safeContext.shrunkOnce;\n    const itemsRaw = safeContext.items;\n    const items = this.filterForShrinkImpl(itemsRaw);\n\n    if (items.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n\n    const rootShrink = shrunkOnce ? Stream_1.Stream.nil() : new Stream_1.Stream([[]][Symbol.iterator]());\n    const nextShrinks = [];\n\n    for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n      nextShrinks.push((0, LazyIterableIterator_1.makeLazy)(() => {\n        const fixedStart = items.slice(0, numToKeep);\n        return this.lengthArb.shrink(items.length - 1 - numToKeep, undefined).map(l => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n      }));\n    }\n\n    for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n      nextShrinks.push((0, LazyIterableIterator_1.makeLazy)(() => this.oneCommandArb.shrink(items[itemAt].value_, items[itemAt].context).map(v => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n    }\n\n    return rootShrink.join(...nextShrinks).map(shrinkables => {\n      return this.buildValueFor(shrinkables.map(c => new Value_1.Value(c.value_.clone(), c.context)), true);\n    });\n  }\n\n}\n\nexports.CommandsArbitrary = CommandsArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","CommandsArbitrary","Arbitrary_1","require","Value_1","CommandsIterable_1","CommandWrapper_1","ReplayPath_1","LazyIterableIterator_1","Stream_1","oneof_1","RestrictedIntegerArbitraryBuilder_1","Arbitrary","constructor","commandArbs","maxGeneratedCommands","maxCommands","sourceReplayPath","disableReplayLog","oneCommandArb","oneof","map","c","CommandWrapper","lengthArb","restrictedIntegerArbitraryBuilder","replayPath","replayPathPosition","metadataForReplay","JSON","stringify","ReplayPath","buildValueFor","items","shrunkOnce","commands","item","value_","context","Value","CommandsIterable","generate","mrng","size","undefined","sizeValue","Array","idx","canShrinkWithoutContext","filterOnExecution","itemsRaw","hasRan","push","filterOnReplay","filter","state","Error","filterForShrinkImpl","parse","length","shrink","_value","Stream","nil","safeContext","rootShrink","Symbol","iterator","nextShrinks","numToKeep","makeLazy","fixedStart","slice","l","concat","itemAt","v","join","shrinkables","clone"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/CommandsArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandsArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst CommandsIterable_1 = require(\"../../check/model/commands/CommandsIterable\");\nconst CommandWrapper_1 = require(\"../../check/model/commands/CommandWrapper\");\nconst ReplayPath_1 = require(\"../../check/model/ReplayPath\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst oneof_1 = require(\"../oneof\");\nconst RestrictedIntegerArbitraryBuilder_1 = require(\"./builders/RestrictedIntegerArbitraryBuilder\");\nclass CommandsArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n        super();\n        this.sourceReplayPath = sourceReplayPath;\n        this.disableReplayLog = disableReplayLog;\n        this.oneCommandArb = (0, oneof_1.oneof)(...commandArbs).map((c) => new CommandWrapper_1.CommandWrapper(c));\n        this.lengthArb = (0, RestrictedIntegerArbitraryBuilder_1.restrictedIntegerArbitraryBuilder)(0, maxGeneratedCommands, maxCommands);\n        this.replayPath = [];\n        this.replayPathPosition = 0;\n    }\n    metadataForReplay() {\n        return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath_1.ReplayPath.stringify(this.replayPath))}`;\n    }\n    buildValueFor(items, shrunkOnce) {\n        const commands = items.map((item) => item.value_);\n        const context = { shrunkOnce, items };\n        return new Value_1.Value(new CommandsIterable_1.CommandsIterable(commands, () => this.metadataForReplay()), context);\n    }\n    generate(mrng) {\n        const size = this.lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const items = Array(sizeValue);\n        for (let idx = 0; idx !== sizeValue; ++idx) {\n            const item = this.oneCommandArb.generate(mrng, undefined);\n            items[idx] = item;\n        }\n        this.replayPathPosition = 0;\n        return this.buildValueFor(items, false);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    filterOnExecution(itemsRaw) {\n        const items = [];\n        for (const c of itemsRaw) {\n            if (c.value_.hasRan) {\n                this.replayPath.push(true);\n                items.push(c);\n            }\n            else\n                this.replayPath.push(false);\n        }\n        return items;\n    }\n    filterOnReplay(itemsRaw) {\n        return itemsRaw.filter((c, idx) => {\n            const state = this.replayPath[this.replayPathPosition + idx];\n            if (state === undefined)\n                throw new Error(`Too short replayPath`);\n            if (!state && c.value_.hasRan)\n                throw new Error(`Mismatch between replayPath and real execution`);\n            return state;\n        });\n    }\n    filterForShrinkImpl(itemsRaw) {\n        if (this.replayPathPosition === 0) {\n            this.replayPath = this.sourceReplayPath !== null ? ReplayPath_1.ReplayPath.parse(this.sourceReplayPath) : [];\n        }\n        const items = this.replayPathPosition < this.replayPath.length\n            ? this.filterOnReplay(itemsRaw)\n            : this.filterOnExecution(itemsRaw);\n        this.replayPathPosition += itemsRaw.length;\n        return items;\n    }\n    shrink(_value, context) {\n        if (context === undefined) {\n            return Stream_1.Stream.nil();\n        }\n        const safeContext = context;\n        const shrunkOnce = safeContext.shrunkOnce;\n        const itemsRaw = safeContext.items;\n        const items = this.filterForShrinkImpl(itemsRaw);\n        if (items.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        const rootShrink = shrunkOnce\n            ? Stream_1.Stream.nil()\n            : new Stream_1.Stream([[]][Symbol.iterator]());\n        const nextShrinks = [];\n        for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n            nextShrinks.push((0, LazyIterableIterator_1.makeLazy)(() => {\n                const fixedStart = items.slice(0, numToKeep);\n                return this.lengthArb\n                    .shrink(items.length - 1 - numToKeep, undefined)\n                    .map((l) => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n            }));\n        }\n        for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n            nextShrinks.push((0, LazyIterableIterator_1.makeLazy)(() => this.oneCommandArb\n                .shrink(items[itemAt].value_, items[itemAt].context)\n                .map((v) => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n        }\n        return rootShrink.join(...nextShrinks).map((shrinkables) => {\n            return this.buildValueFor(shrinkables.map((c) => new Value_1.Value(c.value_.clone(), c.context)), true);\n        });\n    }\n}\nexports.CommandsArbitrary = CommandsArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
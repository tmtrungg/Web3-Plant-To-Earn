{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeArray = exports.serialize = void 0;\n\nvar utils_js_1 = require(\"../utils.js\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\n\n\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\n\nfunction serialize() {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  var retArr = arr.map(function (data) {\n    return \"\".concat(encodeURIComponent(data.name), \"=\").concat(encodeURIComponent(data.value));\n  }); // Return the resulting serialization\n\n  return retArr.join('&').replace(r20, '+');\n}\n\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\n\nfunction serializeArray() {\n  var _this = this; // Resolve all form elements from either forms or collections of form elements\n\n\n  return this.map(function (_, elem) {\n    var $elem = _this._make(elem);\n\n    if ((0, utils_js_1.isTag)(elem) && elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n  '[name!=\"\"]:enabled' + // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' + // And are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map(function (_, elem) {\n    var _a;\n\n    var $elem = _this._make(elem);\n\n    var name = $elem.attr('name'); // We have filtered for elements with a name before.\n    // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : ''; // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n    if (Array.isArray(value)) {\n      return value.map(function (val) {\n        /*\n         * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n         * These can occur inside of `<textarea>'s`\n         */\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      });\n    } // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n\n\n    return {\n      name: name,\n      value: value.replace(rCRLF, '\\r\\n')\n    };\n  }).toArray();\n}\n\nexports.serializeArray = serializeArray;","map":{"version":3,"mappings":";;;;;;;AAEA;AAEA;;;;;;AAIA,IAAMA,mBAAmB,GAAG,8BAA5B;AACA,IAAMC,GAAG,GAAG,MAAZ;AACA,IAAMC,KAAK,GAAG,QAAd;AAEA;;;;;;;;;;;;;;;AAcA,SAAgBC,SAAhB,GAAyB;EACvB;EACA,IAAMC,GAAG,GAAG,KAAKC,cAAL,EAAZ,CAFuB,CAIvB;;EACA,IAAMC,MAAM,GAAGF,GAAG,CAACG,GAAJ,CACb,UAACC,IAAD,EAAK;IACH,iBAAGC,kBAAkB,CAACD,IAAI,CAACE,IAAN,CAArB,EAAgC,GAAhC,EAAgCC,MAAhC,CAAoCF,kBAAkB,CAACD,IAAI,CAACI,KAAN,CAAtD;EAAoE,CAFzD,CAAf,CALuB,CAUvB;;EACA,OAAON,MAAM,CAACO,IAAP,CAAY,GAAZ,EAAiBC,OAAjB,CAAyBb,GAAzB,EAA8B,GAA9B,CAAP;AACD;;AAZDc;AAmBA;;;;;;;;;;;;;;;AAcA,SAAgBV,cAAhB,GAA8B;EAA9B,iBAA8B,CAG5B;;;EACA,OAAO,KAAKE,GAAL,CAAS,UAACS,CAAD,EAAIC,IAAJ,EAAQ;IACtB,IAAMC,KAAK,GAAGC,KAAI,CAACC,KAAL,CAAWH,IAAX,CAAd;;IACA,IAAI,sBAAMA,IAAN,KAAeA,IAAI,CAACP,IAAL,KAAc,MAAjC,EAAyC;MACvC,OAAOQ,KAAK,CAACG,IAAN,CAAWrB,mBAAX,EAAgCsB,OAAhC,EAAP;IACD;;IACD,OAAOJ,KAAK,CAACK,MAAN,CAAavB,mBAAb,EAAkCsB,OAAlC,EAAP;EACD,CANM,EAOJC,MAPI,EAQH;EACA,uBACE;EACA,+CAFF,GAGE;EACA,8CAbC,CAcH;EAdG,EAgBJhB,GAhBI,CAgB0B,UAACS,CAAD,EAAIC,IAAJ,EAAQ;;;IACrC,IAAMC,KAAK,GAAGC,KAAI,CAACC,KAAL,CAAWH,IAAX,CAAd;;IACA,IAAMP,IAAI,GAAGQ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAb,CAFqC,CAEM;IAC3C;;IACA,IAAMZ,KAAK,GAAG,WAAK,CAACa,GAAN,QAAW,IAAX,IAAWC,aAAX,GAAWA,EAAX,GAAe,EAA7B,CAJqC,CAMrC;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAchB,KAAd,CAAJ,EAA0B;MACxB,OAAOA,KAAK,CAACL,GAAN,CAAU,UAACkB,GAAD,EAAI;QACnB;;;;QAIA,OAAC;UAAEf,IAAI,MAAN;UAAQE,KAAK,EAAEa,GAAG,CAACX,OAAJ,CAAYZ,KAAZ,EAAmB,MAAnB;QAAf,CAAD;MAA6C,CALxC,CAAP;IAOD,CAfoC,CAgBrC;;;IACA,OAAO;MAAEQ,IAAI,MAAN;MAAQE,KAAK,EAAEA,KAAK,CAACE,OAAN,CAAcZ,KAAd,EAAqB,MAArB;IAAf,CAAP;EACD,CAlCI,EAmCJoB,OAnCI,EAAP;AAoCD;;AAxCDP","names":["submittableSelector","r20","rCRLF","serialize","arr","serializeArray","retArr","map","data","encodeURIComponent","name","concat","value","join","replace","exports","_","elem","$elem","_this","_make","find","toArray","filter","attr","val","_a","Array","isArray"],"sources":["api/forms.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
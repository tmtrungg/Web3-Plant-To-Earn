{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormattingElementList = exports.EntryType = void 0; //Const\n\nconst NOAH_ARK_CAPACITY = 3;\nvar EntryType;\n\n(function (EntryType) {\n  EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n  EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = exports.EntryType || (exports.EntryType = {}));\n\nconst MARKER = {\n  type: EntryType.Marker\n}; //List of formatting elements\n\nclass FormattingElementList {\n  constructor(treeAdapter) {\n    this.treeAdapter = treeAdapter;\n    this.entries = [];\n    this.bookmark = null;\n  } //Noah Ark's condition\n  //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n  //lightweight heuristics without thorough attributes check.\n\n\n  _getNoahArkConditionCandidates(newElement, neAttrs) {\n    const candidates = [];\n    const neAttrsLength = neAttrs.length;\n    const neTagName = this.treeAdapter.getTagName(newElement);\n    const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n    for (let i = 0; i < this.entries.length; i++) {\n      const entry = this.entries[i];\n\n      if (entry.type === EntryType.Marker) {\n        break;\n      }\n\n      const {\n        element\n      } = entry;\n\n      if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n        const elementAttrs = this.treeAdapter.getAttrList(element);\n\n        if (elementAttrs.length === neAttrsLength) {\n          candidates.push({\n            idx: i,\n            attrs: elementAttrs\n          });\n        }\n      }\n    }\n\n    return candidates;\n  }\n\n  _ensureNoahArkCondition(newElement) {\n    if (this.entries.length < NOAH_ARK_CAPACITY) return;\n    const neAttrs = this.treeAdapter.getAttrList(newElement);\n\n    const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n\n    if (candidates.length < NOAH_ARK_CAPACITY) return; //NOTE: build attrs map for the new element, so we can perform fast lookups\n\n    const neAttrsMap = new Map(neAttrs.map(neAttr => [neAttr.name, neAttr.value]));\n    let validCandidates = 0; //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n\n    for (let i = 0; i < candidates.length; i++) {\n      const candidate = candidates[i]; // We know that `candidate.attrs.length === neAttrs.length`\n\n      if (candidate.attrs.every(cAttr => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n        validCandidates += 1;\n\n        if (validCandidates >= NOAH_ARK_CAPACITY) {\n          this.entries.splice(candidate.idx, 1);\n        }\n      }\n    }\n  } //Mutations\n\n\n  insertMarker() {\n    this.entries.unshift(MARKER);\n  }\n\n  pushElement(element, token) {\n    this._ensureNoahArkCondition(element);\n\n    this.entries.unshift({\n      type: EntryType.Element,\n      element,\n      token\n    });\n  }\n\n  insertElementAfterBookmark(element, token) {\n    const bookmarkIdx = this.entries.indexOf(this.bookmark);\n    this.entries.splice(bookmarkIdx, 0, {\n      type: EntryType.Element,\n      element,\n      token\n    });\n  }\n\n  removeEntry(entry) {\n    const entryIndex = this.entries.indexOf(entry);\n\n    if (entryIndex >= 0) {\n      this.entries.splice(entryIndex, 1);\n    }\n  }\n  /**\n   * Clears the list of formatting elements up to the last marker.\n   *\n   * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n   */\n\n\n  clearToLastMarker() {\n    const markerIdx = this.entries.indexOf(MARKER);\n\n    if (markerIdx >= 0) {\n      this.entries.splice(0, markerIdx + 1);\n    } else {\n      this.entries.length = 0;\n    }\n  } //Search\n\n\n  getElementEntryInScopeWithTagName(tagName) {\n    const entry = this.entries.find(entry => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n    return entry && entry.type === EntryType.Element ? entry : null;\n  }\n\n  getElementEntry(element) {\n    return this.entries.find(entry => entry.type === EntryType.Element && entry.element === element);\n  }\n\n}\n\nexports.FormattingElementList = FormattingElementList;","map":{"version":3,"names":["Object","defineProperty","exports","value","FormattingElementList","EntryType","NOAH_ARK_CAPACITY","MARKER","type","Marker","constructor","treeAdapter","entries","bookmark","_getNoahArkConditionCandidates","newElement","neAttrs","candidates","neAttrsLength","length","neTagName","getTagName","neNamespaceURI","getNamespaceURI","i","entry","element","elementAttrs","getAttrList","push","idx","attrs","_ensureNoahArkCondition","neAttrsMap","Map","map","neAttr","name","validCandidates","candidate","every","cAttr","get","splice","insertMarker","unshift","pushElement","token","Element","insertElementAfterBookmark","bookmarkIdx","indexOf","removeEntry","entryIndex","clearToLastMarker","markerIdx","getElementEntryInScopeWithTagName","tagName","find","getElementEntry"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/parse5-htmlparser2-tree-adapter/node_modules/parse5/dist/cjs/parser/formatting-element-list.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormattingElementList = exports.EntryType = void 0;\n//Const\nconst NOAH_ARK_CAPACITY = 3;\nvar EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = exports.EntryType || (exports.EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nclass FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\nexports.FormattingElementList = FormattingElementList;\n//# sourceMappingURL=formatting-element-list.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}
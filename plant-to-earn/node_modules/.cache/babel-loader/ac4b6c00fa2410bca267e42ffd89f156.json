{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayArbitrary = void 0;\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nconst integer_1 = require(\"../integer\");\n\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\n\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\n\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\n\nconst DepthContext_1 = require(\"./helpers/DepthContext\");\n\nconst BuildSlicedGenerator_1 = require(\"./helpers/BuildSlicedGenerator\");\n\nfunction biasedMaxLength(minLength, maxLength) {\n  if (minLength === maxLength) {\n    return minLength;\n  }\n\n  return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\n\nclass ArrayArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, customSlices) {\n    super();\n    this.arb = arb;\n    this.minLength = minLength;\n    this.maxGeneratedLength = maxGeneratedLength;\n    this.maxLength = maxLength;\n    this.setBuilder = setBuilder;\n    this.customSlices = customSlices;\n    this.lengthArb = (0, integer_1.integer)({\n      min: minLength,\n      max: maxGeneratedLength\n    });\n    this.depthContext = (0, DepthContext_1.getDepthContextFor)(depthIdentifier);\n  }\n\n  preFilter(tab) {\n    if (this.setBuilder === undefined) {\n      return tab;\n    }\n\n    const s = this.setBuilder();\n\n    for (let index = 0; index !== tab.length; ++index) {\n      s.tryAdd(tab[index]);\n    }\n\n    return s.getData();\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[symbols_1.cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    let numSkippedInRow = 0;\n    const s = setBuilder();\n    const slicedGenerator = (0, BuildSlicedGenerator_1.buildSlicedGenerator)(this.arb, mrng, this.customSlices, biasFactorItems);\n\n    while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n      const current = slicedGenerator.next();\n\n      if (s.tryAdd(current)) {\n        numSkippedInRow = 0;\n      } else {\n        numSkippedInRow += 1;\n      }\n    }\n\n    return s.getData();\n  }\n\n  safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n\n    try {\n      return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n\n  generateNItems(N, mrng, biasFactorItems) {\n    const items = [];\n    const slicedGenerator = (0, BuildSlicedGenerator_1.buildSlicedGenerator)(this.arb, mrng, this.customSlices, biasFactorItems);\n    slicedGenerator.attemptExact(N);\n\n    for (let index = 0; index !== N; ++index) {\n      const current = slicedGenerator.next();\n      items.push(current);\n    }\n\n    return items;\n  }\n\n  safeGenerateNItems(N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n\n    try {\n      return this.generateNItems(N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n\n  wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n    const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n    let cloneable = false;\n    const vs = [];\n    const itemsContexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      itemsContexts.push(s.context);\n    }\n\n    if (cloneable) {\n      ArrayArbitrary.makeItCloneable(vs, items);\n    }\n\n    const context = {\n      shrunkOnce,\n      lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n      itemsContexts,\n      startIndex\n    };\n    return new Value_1.Value(vs, context);\n  }\n\n  generate(mrng, biasFactor) {\n    const biasMeta = this.applyBias(mrng, biasFactor);\n    const targetSize = biasMeta.size;\n    const items = this.setBuilder !== undefined ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n    return this.wrapper(items, false, undefined, 0);\n  }\n\n  applyBias(mrng, biasFactor) {\n    if (biasFactor === undefined) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n    const targetSizeValue = (0, integer_1.integer)({\n      min: this.minLength,\n      max: maxBiasedLength\n    }).generate(mrng, undefined);\n    return {\n      size: targetSizeValue.value,\n      biasFactorItems: biasFactor\n    };\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n      return false;\n    }\n\n    for (let index = 0; index !== value.length; ++index) {\n      if (!(index in value)) {\n        return false;\n      }\n\n      if (!this.arb.canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n\n    const filtered = this.preFilter(value.map(item => new Value_1.Value(item, undefined)));\n    return filtered.length === value.length;\n  }\n\n  shrinkItemByItem(value, safeContext, endIndex) {\n    let shrinks = Stream_1.Stream.nil();\n\n    for (let index = safeContext.startIndex; index < endIndex; ++index) {\n      shrinks = shrinks.join((0, LazyIterableIterator_1.makeLazy)(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map(v => {\n        const beforeCurrent = value.slice(0, index).map((v, i) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[i]));\n        const afterCurrent = value.slice(index + 1).map((v, i) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[i + index + 1]));\n        return [beforeCurrent.concat(v).concat(afterCurrent), undefined, index];\n      })));\n    }\n\n    return shrinks;\n  }\n\n  shrinkImpl(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n\n    const safeContext = context !== undefined ? context : {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: [],\n      startIndex: 0\n    };\n    return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(lengthValue => {\n      const sliceStart = value.length - lengthValue.value;\n      return [value.slice(sliceStart).map((v, index) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[index + sliceStart])), lengthValue.context, 0];\n    }).join((0, LazyIterableIterator_1.makeLazy)(() => value.length > this.minLength ? this.shrinkItemByItem(value, safeContext, 1) : this.shrinkItemByItem(value, safeContext, value.length))).join(value.length > this.minLength ? (0, LazyIterableIterator_1.makeLazy)(() => {\n      const subContext = {\n        shrunkOnce: false,\n        lengthContext: undefined,\n        itemsContexts: safeContext.itemsContexts.slice(1),\n        startIndex: 0\n      };\n      return this.shrinkImpl(value.slice(1), subContext).filter(v => this.minLength <= v[0].length + 1).map(v => {\n        return [[new Value_1.Value((0, symbols_1.cloneIfNeeded)(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined, 0];\n      });\n    }) : Stream_1.Stream.nil());\n  }\n\n  shrink(value, context) {\n    return this.shrinkImpl(value, context).map(contextualValue => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n  }\n\n}\n\nexports.ArrayArbitrary = ArrayArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","ArrayArbitrary","Stream_1","require","symbols_1","integer_1","LazyIterableIterator_1","Arbitrary_1","Value_1","DepthContext_1","BuildSlicedGenerator_1","biasedMaxLength","minLength","maxLength","Math","floor","log","Arbitrary","constructor","arb","maxGeneratedLength","depthIdentifier","setBuilder","customSlices","lengthArb","integer","min","max","depthContext","getDepthContextFor","preFilter","tab","undefined","s","index","length","tryAdd","getData","makeItCloneable","vs","shrinkables","cloneMethod","cloned","idx","push","generateNItemsNoDuplicates","N","mrng","biasFactorItems","numSkippedInRow","slicedGenerator","buildSlicedGenerator","size","current","next","safeGenerateNItemsNoDuplicates","depthImpact","depth","generateNItems","items","attemptExact","safeGenerateNItems","wrapper","itemsRaw","shrunkOnce","itemsRawLengthContext","startIndex","cloneable","itemsContexts","hasToBeCloned","context","lengthContext","Value","generate","biasFactor","biasMeta","applyBias","targetSize","nextInt","maxBiasedLength","targetSizeValue","canShrinkWithoutContext","Array","isArray","filtered","map","item","shrinkItemByItem","safeContext","endIndex","shrinks","Stream","nil","join","makeLazy","shrink","v","beforeCurrent","slice","i","cloneIfNeeded","afterCurrent","concat","shrinkImpl","drop","lengthValue","sliceStart","subContext","filter","contextualValue"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/ArrayArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayArbitrary = void 0;\nconst Stream_1 = require(\"../../stream/Stream\");\nconst symbols_1 = require(\"../../check/symbols\");\nconst integer_1 = require(\"../integer\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst DepthContext_1 = require(\"./helpers/DepthContext\");\nconst BuildSlicedGenerator_1 = require(\"./helpers/BuildSlicedGenerator\");\nfunction biasedMaxLength(minLength, maxLength) {\n    if (minLength === maxLength) {\n        return minLength;\n    }\n    return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\nclass ArrayArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, customSlices) {\n        super();\n        this.arb = arb;\n        this.minLength = minLength;\n        this.maxGeneratedLength = maxGeneratedLength;\n        this.maxLength = maxLength;\n        this.setBuilder = setBuilder;\n        this.customSlices = customSlices;\n        this.lengthArb = (0, integer_1.integer)({ min: minLength, max: maxGeneratedLength });\n        this.depthContext = (0, DepthContext_1.getDepthContextFor)(depthIdentifier);\n    }\n    preFilter(tab) {\n        if (this.setBuilder === undefined) {\n            return tab;\n        }\n        const s = this.setBuilder();\n        for (let index = 0; index !== tab.length; ++index) {\n            s.tryAdd(tab[index]);\n        }\n        return s.getData();\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[symbols_1.cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        let numSkippedInRow = 0;\n        const s = setBuilder();\n        const slicedGenerator = (0, BuildSlicedGenerator_1.buildSlicedGenerator)(this.arb, mrng, this.customSlices, biasFactorItems);\n        while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n            const current = slicedGenerator.next();\n            if (s.tryAdd(current)) {\n                numSkippedInRow = 0;\n            }\n            else {\n                numSkippedInRow += 1;\n            }\n        }\n        return s.getData();\n    }\n    safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    generateNItems(N, mrng, biasFactorItems) {\n        const items = [];\n        const slicedGenerator = (0, BuildSlicedGenerator_1.buildSlicedGenerator)(this.arb, mrng, this.customSlices, biasFactorItems);\n        slicedGenerator.attemptExact(N);\n        for (let index = 0; index !== N; ++index) {\n            const current = slicedGenerator.next();\n            items.push(current);\n        }\n        return items;\n    }\n    safeGenerateNItems(N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItems(N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n        const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n        let cloneable = false;\n        const vs = [];\n        const itemsContexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            itemsContexts.push(s.context);\n        }\n        if (cloneable) {\n            ArrayArbitrary.makeItCloneable(vs, items);\n        }\n        const context = {\n            shrunkOnce,\n            lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined\n                ? itemsRawLengthContext\n                : undefined,\n            itemsContexts,\n            startIndex,\n        };\n        return new Value_1.Value(vs, context);\n    }\n    generate(mrng, biasFactor) {\n        const biasMeta = this.applyBias(mrng, biasFactor);\n        const targetSize = biasMeta.size;\n        const items = this.setBuilder !== undefined\n            ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems)\n            : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n        return this.wrapper(items, false, undefined, 0);\n    }\n    applyBias(mrng, biasFactor) {\n        if (biasFactor === undefined) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n        const targetSizeValue = (0, integer_1.integer)({ min: this.minLength, max: maxBiasedLength }).generate(mrng, undefined);\n        return { size: targetSizeValue.value, biasFactorItems: biasFactor };\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n            return false;\n        }\n        for (let index = 0; index !== value.length; ++index) {\n            if (!(index in value)) {\n                return false;\n            }\n            if (!this.arb.canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        const filtered = this.preFilter(value.map((item) => new Value_1.Value(item, undefined)));\n        return filtered.length === value.length;\n    }\n    shrinkItemByItem(value, safeContext, endIndex) {\n        let shrinks = Stream_1.Stream.nil();\n        for (let index = safeContext.startIndex; index < endIndex; ++index) {\n            shrinks = shrinks.join((0, LazyIterableIterator_1.makeLazy)(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map((v) => {\n                const beforeCurrent = value\n                    .slice(0, index)\n                    .map((v, i) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[i]));\n                const afterCurrent = value\n                    .slice(index + 1)\n                    .map((v, i) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[i + index + 1]));\n                return [\n                    beforeCurrent.concat(v).concat(afterCurrent),\n                    undefined,\n                    index,\n                ];\n            })));\n        }\n        return shrinks;\n    }\n    shrinkImpl(value, context) {\n        if (value.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        const safeContext = context !== undefined\n            ? context\n            : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [], startIndex: 0 };\n        return (this.lengthArb\n            .shrink(value.length, safeContext.lengthContext)\n            .drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0)\n            .map((lengthValue) => {\n            const sliceStart = value.length - lengthValue.value;\n            return [\n                value\n                    .slice(sliceStart)\n                    .map((v, index) => new Value_1.Value((0, symbols_1.cloneIfNeeded)(v), safeContext.itemsContexts[index + sliceStart])),\n                lengthValue.context,\n                0,\n            ];\n        })\n            .join((0, LazyIterableIterator_1.makeLazy)(() => value.length > this.minLength\n            ? this.shrinkItemByItem(value, safeContext, 1)\n            : this.shrinkItemByItem(value, safeContext, value.length)))\n            .join(value.length > this.minLength\n            ? (0, LazyIterableIterator_1.makeLazy)(() => {\n                const subContext = {\n                    shrunkOnce: false,\n                    lengthContext: undefined,\n                    itemsContexts: safeContext.itemsContexts.slice(1),\n                    startIndex: 0,\n                };\n                return this.shrinkImpl(value.slice(1), subContext)\n                    .filter((v) => this.minLength <= v[0].length + 1)\n                    .map((v) => {\n                    return [\n                        [new Value_1.Value((0, symbols_1.cloneIfNeeded)(value[0]), safeContext.itemsContexts[0])].concat(v[0]),\n                        undefined,\n                        0,\n                    ];\n                });\n            })\n            : Stream_1.Stream.nil()));\n    }\n    shrink(value, context) {\n        return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n    }\n}\nexports.ArrayArbitrary = ArrayArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Preprocessor = void 0;\n\nconst unicode_js_1 = require(\"../common/unicode.js\");\n\nconst error_codes_js_1 = require(\"../common/error-codes.js\"); //Const\n\n\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nclass Preprocessor {\n  constructor(handler) {\n    this.handler = handler;\n    this.html = '';\n    this.pos = -1; // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n\n    this.lastGapPos = -2;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    this.isEol = false;\n    this.lineStartPos = 0;\n    this.droppedBufferSize = 0;\n    this.line = 1; //NOTE: avoid reporting errors twice on advance/retreat\n\n    this.lastErrOffset = -1;\n  }\n  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n\n\n  get col() {\n    return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n  }\n\n  get offset() {\n    return this.droppedBufferSize + this.pos;\n  }\n\n  getError(code) {\n    const {\n      line,\n      col,\n      offset\n    } = this;\n    return {\n      code,\n      startLine: line,\n      endLine: line,\n      startCol: col,\n      endCol: col,\n      startOffset: offset,\n      endOffset: offset\n    };\n  }\n\n  _err(code) {\n    if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n      this.lastErrOffset = this.offset;\n      this.handler.onParseError(this.getError(code));\n    }\n  }\n\n  _addGap() {\n    this.gapStack.push(this.lastGapPos);\n    this.lastGapPos = this.pos;\n  }\n\n  _processSurrogate(cp) {\n    //NOTE: try to peek a surrogate pair\n    if (this.pos !== this.html.length - 1) {\n      const nextCp = this.html.charCodeAt(this.pos + 1);\n\n      if ((0, unicode_js_1.isSurrogatePair)(nextCp)) {\n        //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n        this.pos++; //NOTE: add a gap that should be avoided during retreat\n\n        this._addGap();\n\n        return (0, unicode_js_1.getSurrogatePairCodePoint)(cp, nextCp);\n      }\n    } //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n    else if (!this.lastChunkWritten) {\n      this.endOfChunkHit = true;\n      return unicode_js_1.CODE_POINTS.EOF;\n    } //NOTE: isolated surrogate\n\n\n    this._err(error_codes_js_1.ERR.surrogateInInputStream);\n\n    return cp;\n  }\n\n  willDropParsedChunk() {\n    return this.pos > this.bufferWaterline;\n  }\n\n  dropParsedChunk() {\n    if (this.willDropParsedChunk()) {\n      this.html = this.html.substring(this.pos);\n      this.lineStartPos -= this.pos;\n      this.droppedBufferSize += this.pos;\n      this.pos = 0;\n      this.lastGapPos = -2;\n      this.gapStack.length = 0;\n    }\n  }\n\n  write(chunk, isLastChunk) {\n    if (this.html.length > 0) {\n      this.html += chunk;\n    } else {\n      this.html = chunk;\n    }\n\n    this.endOfChunkHit = false;\n    this.lastChunkWritten = isLastChunk;\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n    this.endOfChunkHit = false;\n  }\n\n  startsWith(pattern, caseSensitive) {\n    // Check if our buffer has enough characters\n    if (this.pos + pattern.length > this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return false;\n    }\n\n    if (caseSensitive) {\n      return this.html.startsWith(pattern, this.pos);\n    }\n\n    for (let i = 0; i < pattern.length; i++) {\n      const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n\n      if (cp !== pattern.charCodeAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  peek(offset) {\n    const pos = this.pos + offset;\n\n    if (pos >= this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return unicode_js_1.CODE_POINTS.EOF;\n    }\n\n    return this.html.charCodeAt(pos);\n  }\n\n  advance() {\n    this.pos++; //NOTE: LF should be in the last column of the line\n\n    if (this.isEol) {\n      this.isEol = false;\n      this.line++;\n      this.lineStartPos = this.pos;\n    }\n\n    if (this.pos >= this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return unicode_js_1.CODE_POINTS.EOF;\n    }\n\n    let cp = this.html.charCodeAt(this.pos); //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n    if (cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n      this.isEol = true;\n      this.skipNextNewLine = true;\n      return unicode_js_1.CODE_POINTS.LINE_FEED;\n    } //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n    //must be ignored.\n\n\n    if (cp === unicode_js_1.CODE_POINTS.LINE_FEED) {\n      this.isEol = true;\n\n      if (this.skipNextNewLine) {\n        // `line` will be bumped again in the recursive call.\n        this.line--;\n        this.skipNextNewLine = false;\n\n        this._addGap();\n\n        return this.advance();\n      }\n    }\n\n    this.skipNextNewLine = false;\n\n    if ((0, unicode_js_1.isSurrogate)(cp)) {\n      cp = this._processSurrogate(cp);\n    } //OPTIMIZATION: first check if code point is in the common allowed\n    //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n    //before going into detailed performance cost validation.\n\n\n    const isCommonValidRange = this.handler.onParseError === null || cp > 0x1f && cp < 0x7f || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN || cp > 0x9f && cp < 64976;\n\n    if (!isCommonValidRange) {\n      this._checkForProblematicCharacters(cp);\n    }\n\n    return cp;\n  }\n\n  _checkForProblematicCharacters(cp) {\n    if ((0, unicode_js_1.isControlCodePoint)(cp)) {\n      this._err(error_codes_js_1.ERR.controlCharacterInInputStream);\n    } else if ((0, unicode_js_1.isUndefinedCodePoint)(cp)) {\n      this._err(error_codes_js_1.ERR.noncharacterInInputStream);\n    }\n  }\n\n  retreat(count) {\n    this.pos -= count;\n\n    while (this.pos < this.lastGapPos) {\n      this.lastGapPos = this.gapStack.pop();\n      this.pos--;\n    }\n\n    this.isEol = false;\n  }\n\n}\n\nexports.Preprocessor = Preprocessor;","map":{"version":3,"names":["Object","defineProperty","exports","value","Preprocessor","unicode_js_1","require","error_codes_js_1","DEFAULT_BUFFER_WATERLINE","constructor","handler","html","pos","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","line","lastErrOffset","col","Number","offset","getError","code","startLine","endLine","startCol","endCol","startOffset","endOffset","_err","onParseError","_addGap","push","_processSurrogate","cp","length","nextCp","charCodeAt","isSurrogatePair","getSurrogatePairCodePoint","CODE_POINTS","EOF","ERR","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","substring","write","chunk","isLastChunk","insertHtmlAtCurrentPos","startsWith","pattern","caseSensitive","i","peek","advance","CARRIAGE_RETURN","LINE_FEED","isSurrogate","isCommonValidRange","_checkForProblematicCharacters","isControlCodePoint","controlCharacterInInputStream","isUndefinedCodePoint","noncharacterInInputStream","retreat","count","pop"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/cheerio/node_modules/parse5/dist/cjs/tokenizer/preprocessor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Preprocessor = void 0;\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code) {\n        const { line, col, offset } = this;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol: col,\n            endCol: col,\n            startOffset: offset,\n            endOffset: offset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if ((0, unicode_js_1.isSurrogatePair)(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return (0, unicode_js_1.getSurrogatePairCodePoint)(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(error_codes_js_1.ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        return this.html.charCodeAt(pos);\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return unicode_js_1.CODE_POINTS.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === unicode_js_1.CODE_POINTS.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if ((0, unicode_js_1.isSurrogate)(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === unicode_js_1.CODE_POINTS.LINE_FEED ||\n            cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if ((0, unicode_js_1.isControlCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.controlCharacterInInputStream);\n        }\n        else if ((0, unicode_js_1.isUndefinedCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\nexports.Preprocessor = Preprocessor;\n//# sourceMappingURL=preprocessor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}
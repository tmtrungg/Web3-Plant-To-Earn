{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyFlagsOnChars = exports.computeFlagsFromChars = exports.computeTogglePositions = exports.computeNextFlags = exports.countToggledBits = void 0;\n\nfunction countToggledBits(n) {\n  let count = 0;\n\n  while (n > BigInt(0)) {\n    if (n & BigInt(1)) ++count;\n    n >>= BigInt(1);\n  }\n\n  return count;\n}\n\nexports.countToggledBits = countToggledBits;\n\nfunction computeNextFlags(flags, nextSize) {\n  const allowedMask = (BigInt(1) << BigInt(nextSize)) - BigInt(1);\n  const preservedFlags = flags & allowedMask;\n  let numMissingFlags = countToggledBits(flags - preservedFlags);\n  let nFlags = preservedFlags;\n\n  for (let mask = BigInt(1); mask <= allowedMask && numMissingFlags !== 0; mask <<= BigInt(1)) {\n    if (!(nFlags & mask)) {\n      nFlags |= mask;\n      --numMissingFlags;\n    }\n  }\n\n  return nFlags;\n}\n\nexports.computeNextFlags = computeNextFlags;\n\nfunction computeTogglePositions(chars, toggleCase) {\n  const positions = [];\n\n  for (let idx = chars.length - 1; idx !== -1; --idx) {\n    if (toggleCase(chars[idx]) !== chars[idx]) positions.push(idx);\n  }\n\n  return positions;\n}\n\nexports.computeTogglePositions = computeTogglePositions;\n\nfunction computeFlagsFromChars(untoggledChars, toggledChars, togglePositions) {\n  let flags = BigInt(0);\n\n  for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n    if (untoggledChars[togglePositions[idx]] !== toggledChars[togglePositions[idx]]) {\n      flags |= mask;\n    }\n  }\n\n  return flags;\n}\n\nexports.computeFlagsFromChars = computeFlagsFromChars;\n\nfunction applyFlagsOnChars(chars, flags, togglePositions, toggleCase) {\n  for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n    if (flags & mask) chars[togglePositions[idx]] = toggleCase(chars[togglePositions[idx]]);\n  }\n}\n\nexports.applyFlagsOnChars = applyFlagsOnChars;","map":{"version":3,"names":["Object","defineProperty","exports","value","applyFlagsOnChars","computeFlagsFromChars","computeTogglePositions","computeNextFlags","countToggledBits","n","count","BigInt","flags","nextSize","allowedMask","preservedFlags","numMissingFlags","nFlags","mask","chars","toggleCase","positions","idx","length","push","untoggledChars","toggledChars","togglePositions"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/helpers/ToggleFlags.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyFlagsOnChars = exports.computeFlagsFromChars = exports.computeTogglePositions = exports.computeNextFlags = exports.countToggledBits = void 0;\nfunction countToggledBits(n) {\n    let count = 0;\n    while (n > BigInt(0)) {\n        if (n & BigInt(1))\n            ++count;\n        n >>= BigInt(1);\n    }\n    return count;\n}\nexports.countToggledBits = countToggledBits;\nfunction computeNextFlags(flags, nextSize) {\n    const allowedMask = (BigInt(1) << BigInt(nextSize)) - BigInt(1);\n    const preservedFlags = flags & allowedMask;\n    let numMissingFlags = countToggledBits(flags - preservedFlags);\n    let nFlags = preservedFlags;\n    for (let mask = BigInt(1); mask <= allowedMask && numMissingFlags !== 0; mask <<= BigInt(1)) {\n        if (!(nFlags & mask)) {\n            nFlags |= mask;\n            --numMissingFlags;\n        }\n    }\n    return nFlags;\n}\nexports.computeNextFlags = computeNextFlags;\nfunction computeTogglePositions(chars, toggleCase) {\n    const positions = [];\n    for (let idx = chars.length - 1; idx !== -1; --idx) {\n        if (toggleCase(chars[idx]) !== chars[idx])\n            positions.push(idx);\n    }\n    return positions;\n}\nexports.computeTogglePositions = computeTogglePositions;\nfunction computeFlagsFromChars(untoggledChars, toggledChars, togglePositions) {\n    let flags = BigInt(0);\n    for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n        if (untoggledChars[togglePositions[idx]] !== toggledChars[togglePositions[idx]]) {\n            flags |= mask;\n        }\n    }\n    return flags;\n}\nexports.computeFlagsFromChars = computeFlagsFromChars;\nfunction applyFlagsOnChars(chars, flags, togglePositions, toggleCase) {\n    for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n        if (flags & mask)\n            chars[togglePositions[idx]] = toggleCase(chars[togglePositions[idx]]);\n    }\n}\nexports.applyFlagsOnChars = applyFlagsOnChars;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
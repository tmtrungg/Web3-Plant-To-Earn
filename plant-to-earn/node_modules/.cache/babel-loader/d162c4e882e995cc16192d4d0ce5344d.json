{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTraversal = void 0;\n\nvar css_what_1 = require(\"css-what\");\n\nvar procedure = new Map([[css_what_1.SelectorType.Universal, 50], [css_what_1.SelectorType.Tag, 30], [css_what_1.SelectorType.Attribute, 1], [css_what_1.SelectorType.Pseudo, 0]]);\n\nfunction isTraversal(token) {\n  return !procedure.has(token.type);\n}\n\nexports.isTraversal = isTraversal;\nvar attributes = new Map([[css_what_1.AttributeAction.Exists, 10], [css_what_1.AttributeAction.Equals, 8], [css_what_1.AttributeAction.Not, 7], [css_what_1.AttributeAction.Start, 6], [css_what_1.AttributeAction.End, 6], [css_what_1.AttributeAction.Any, 5]]);\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\n\nfunction sortByProcedure(arr) {\n  var procs = arr.map(getProcedure);\n\n  for (var i = 1; i < arr.length; i++) {\n    var procNew = procs[i];\n    if (procNew < 0) continue;\n\n    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n      var token = arr[j + 1];\n      arr[j + 1] = arr[j];\n      arr[j] = token;\n      procs[j + 1] = procs[j];\n      procs[j] = procNew;\n    }\n  }\n}\n\nexports.default = sortByProcedure;\n\nfunction getProcedure(token) {\n  var _a, _b;\n\n  var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;\n\n  if (token.type === css_what_1.SelectorType.Attribute) {\n    proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;\n\n    if (token.action === css_what_1.AttributeAction.Equals && token.name === \"id\") {\n      // Prefer ID selectors (eg. #ID)\n      proc = 9;\n    }\n\n    if (token.ignoreCase) {\n      /*\n       * IgnoreCase adds some overhead, prefer \"normal\" token\n       * this is a binary operation, to ensure it's still an int\n       */\n      proc >>= 1;\n    }\n  } else if (token.type === css_what_1.SelectorType.Pseudo) {\n    if (!token.data) {\n      proc = 3;\n    } else if (token.name === \"has\" || token.name === \"contains\") {\n      proc = 0; // Expensive in any case\n    } else if (Array.isArray(token.data)) {\n      // Eg. :matches, :not\n      proc = Math.min.apply(Math, token.data.map(function (d) {\n        return Math.min.apply(Math, d.map(getProcedure));\n      })); // If we have traversals, try to avoid executing this selector\n\n      if (proc < 0) {\n        proc = 0;\n      }\n    } else {\n      proc = 2;\n    }\n  }\n\n  return proc;\n}","map":{"version":3,"mappings":"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","names":["procedure","Map","css_what_1","Universal","Tag","Attribute","Pseudo","isTraversal","token","has","type","exports","attributes","Exists","Equals","Not","Start","End","Any","sortByProcedure","arr","procs","map","getProcedure","i","length","procNew","j","proc","get","_a","action","_b","name","ignoreCase","data","Array","isArray","Math","min","apply","d"],"sources":["sort.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexToDouble = exports.doubleToIndex = exports.decomposeDouble = void 0;\n\nconst ArrayInt64_1 = require(\"./ArrayInt64\");\n\nconst INDEX_POSITIVE_INFINITY = {\n  sign: 1,\n  data: [2146435072, 0]\n};\nconst INDEX_NEGATIVE_INFINITY = {\n  sign: -1,\n  data: [2146435072, 1]\n};\n\nfunction decomposeDouble(d) {\n  const maxSignificand = 2 - Number.EPSILON;\n\n  for (let exponent = -1022; exponent !== 1024; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n\n    if (Math.abs(d) <= maxForExponent) {\n      return {\n        exponent,\n        significand: d / powExponent\n      };\n    }\n  }\n\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\n\nexports.decomposeDouble = decomposeDouble;\n\nfunction positiveNumberToInt64(n) {\n  return [~~(n / 0x100000000), n >>> 0];\n}\n\nfunction indexInDoubleFromDecomp(exponent, significand) {\n  if (exponent === -1022) {\n    const rescaledSignificand = significand * 2 ** 52;\n    return positiveNumberToInt64(rescaledSignificand);\n  }\n\n  const rescaledSignificand = (significand - 1) * 2 ** 52;\n  const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n  const index = positiveNumberToInt64(rescaledSignificand);\n  index[0] += exponentOnlyHigh;\n  return index;\n}\n\nfunction doubleToIndex(d) {\n  if (d === Number.POSITIVE_INFINITY) {\n    return (0, ArrayInt64_1.clone64)(INDEX_POSITIVE_INFINITY);\n  }\n\n  if (d === Number.NEGATIVE_INFINITY) {\n    return (0, ArrayInt64_1.clone64)(INDEX_NEGATIVE_INFINITY);\n  }\n\n  const decomp = decomposeDouble(d);\n  const exponent = decomp.exponent;\n  const significand = decomp.significand;\n\n  if (d > 0 || d === 0 && 1 / d === Number.POSITIVE_INFINITY) {\n    return {\n      sign: 1,\n      data: indexInDoubleFromDecomp(exponent, significand)\n    };\n  } else {\n    const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n\n    if (indexOpposite[1] === 0xffffffff) {\n      indexOpposite[0] += 1;\n      indexOpposite[1] = 0;\n    } else {\n      indexOpposite[1] += 1;\n    }\n\n    return {\n      sign: -1,\n      data: indexOpposite\n    };\n  }\n}\n\nexports.doubleToIndex = doubleToIndex;\n\nfunction indexToDouble(index) {\n  if (index.sign === -1) {\n    const indexOpposite = {\n      sign: 1,\n      data: [index.data[0], index.data[1]]\n    };\n\n    if (indexOpposite.data[1] === 0) {\n      indexOpposite.data[0] -= 1;\n      indexOpposite.data[1] = 0xffffffff;\n    } else {\n      indexOpposite.data[1] -= 1;\n    }\n\n    return -indexToDouble(indexOpposite);\n  }\n\n  if ((0, ArrayInt64_1.isEqual64)(index, INDEX_POSITIVE_INFINITY)) {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  if (index.data[0] < 0x200000) {\n    return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n  }\n\n  const postIndexHigh = index.data[0] - 0x200000;\n  const exponent = -1021 + (postIndexHigh >> 20);\n  const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n  return significand * 2 ** exponent;\n}\n\nexports.indexToDouble = indexToDouble;","map":{"version":3,"names":["Object","defineProperty","exports","value","indexToDouble","doubleToIndex","decomposeDouble","ArrayInt64_1","require","INDEX_POSITIVE_INFINITY","sign","data","INDEX_NEGATIVE_INFINITY","d","maxSignificand","Number","EPSILON","exponent","powExponent","maxForExponent","Math","abs","significand","NaN","positiveNumberToInt64","n","indexInDoubleFromDecomp","rescaledSignificand","exponentOnlyHigh","index","POSITIVE_INFINITY","clone64","NEGATIVE_INFINITY","decomp","indexOpposite","isEqual64","postIndexHigh"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/helpers/DoubleHelpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.indexToDouble = exports.doubleToIndex = exports.decomposeDouble = void 0;\nconst ArrayInt64_1 = require(\"./ArrayInt64\");\nconst INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };\nconst INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };\nfunction decomposeDouble(d) {\n    const maxSignificand = 2 - Number.EPSILON;\n    for (let exponent = -1022; exponent !== 1024; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(d) <= maxForExponent) {\n            return { exponent, significand: d / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nexports.decomposeDouble = decomposeDouble;\nfunction positiveNumberToInt64(n) {\n    return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n    if (exponent === -1022) {\n        const rescaledSignificand = significand * 2 ** 52;\n        return positiveNumberToInt64(rescaledSignificand);\n    }\n    const rescaledSignificand = (significand - 1) * 2 ** 52;\n    const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n    const index = positiveNumberToInt64(rescaledSignificand);\n    index[0] += exponentOnlyHigh;\n    return index;\n}\nfunction doubleToIndex(d) {\n    if (d === Number.POSITIVE_INFINITY) {\n        return (0, ArrayInt64_1.clone64)(INDEX_POSITIVE_INFINITY);\n    }\n    if (d === Number.NEGATIVE_INFINITY) {\n        return (0, ArrayInt64_1.clone64)(INDEX_NEGATIVE_INFINITY);\n    }\n    const decomp = decomposeDouble(d);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (d > 0 || (d === 0 && 1 / d === Number.POSITIVE_INFINITY)) {\n        return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };\n    }\n    else {\n        const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n        if (indexOpposite[1] === 0xffffffff) {\n            indexOpposite[0] += 1;\n            indexOpposite[1] = 0;\n        }\n        else {\n            indexOpposite[1] += 1;\n        }\n        return { sign: -1, data: indexOpposite };\n    }\n}\nexports.doubleToIndex = doubleToIndex;\nfunction indexToDouble(index) {\n    if (index.sign === -1) {\n        const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };\n        if (indexOpposite.data[1] === 0) {\n            indexOpposite.data[0] -= 1;\n            indexOpposite.data[1] = 0xffffffff;\n        }\n        else {\n            indexOpposite.data[1] -= 1;\n        }\n        return -indexToDouble(indexOpposite);\n    }\n    if ((0, ArrayInt64_1.isEqual64)(index, INDEX_POSITIVE_INFINITY)) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index.data[0] < 0x200000) {\n        return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n    }\n    const postIndexHigh = index.data[0] - 0x200000;\n    const exponent = -1021 + (postIndexHigh >> 20);\n    const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n    return significand * 2 ** exponent;\n}\nexports.indexToDouble = indexToDouble;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAACI,eAAR,GAA0B,KAAK,CAA/E;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMC,uBAAuB,GAAG;EAAEC,IAAI,EAAE,CAAR;EAAWC,IAAI,EAAE,CAAC,UAAD,EAAa,CAAb;AAAjB,CAAhC;AACA,MAAMC,uBAAuB,GAAG;EAAEF,IAAI,EAAE,CAAC,CAAT;EAAYC,IAAI,EAAE,CAAC,UAAD,EAAa,CAAb;AAAlB,CAAhC;;AACA,SAASL,eAAT,CAAyBO,CAAzB,EAA4B;EACxB,MAAMC,cAAc,GAAG,IAAIC,MAAM,CAACC,OAAlC;;EACA,KAAK,IAAIC,QAAQ,GAAG,CAAC,IAArB,EAA2BA,QAAQ,KAAK,IAAxC,EAA8C,EAAEA,QAAhD,EAA0D;IACtD,MAAMC,WAAW,GAAG,KAAKD,QAAzB;IACA,MAAME,cAAc,GAAGL,cAAc,GAAGI,WAAxC;;IACA,IAAIE,IAAI,CAACC,GAAL,CAASR,CAAT,KAAeM,cAAnB,EAAmC;MAC/B,OAAO;QAAEF,QAAF;QAAYK,WAAW,EAAET,CAAC,GAAGK;MAA7B,CAAP;IACH;EACJ;;EACD,OAAO;IAAED,QAAQ,EAAEF,MAAM,CAACQ,GAAnB;IAAwBD,WAAW,EAAEP,MAAM,CAACQ;EAA5C,CAAP;AACH;;AACDrB,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AACA,SAASkB,qBAAT,CAA+BC,CAA/B,EAAkC;EAC9B,OAAO,CAAC,CAAC,EAAEA,CAAC,GAAG,WAAN,CAAF,EAAsBA,CAAC,KAAK,CAA5B,CAAP;AACH;;AACD,SAASC,uBAAT,CAAiCT,QAAjC,EAA2CK,WAA3C,EAAwD;EACpD,IAAIL,QAAQ,KAAK,CAAC,IAAlB,EAAwB;IACpB,MAAMU,mBAAmB,GAAGL,WAAW,GAAG,KAAK,EAA/C;IACA,OAAOE,qBAAqB,CAACG,mBAAD,CAA5B;EACH;;EACD,MAAMA,mBAAmB,GAAG,CAACL,WAAW,GAAG,CAAf,IAAoB,KAAK,EAArD;EACA,MAAMM,gBAAgB,GAAG,CAACX,QAAQ,GAAG,IAAZ,IAAoB,KAAK,EAAlD;EACA,MAAMY,KAAK,GAAGL,qBAAqB,CAACG,mBAAD,CAAnC;EACAE,KAAK,CAAC,CAAD,CAAL,IAAYD,gBAAZ;EACA,OAAOC,KAAP;AACH;;AACD,SAASxB,aAAT,CAAuBQ,CAAvB,EAA0B;EACtB,IAAIA,CAAC,KAAKE,MAAM,CAACe,iBAAjB,EAAoC;IAChC,OAAO,CAAC,GAAGvB,YAAY,CAACwB,OAAjB,EAA0BtB,uBAA1B,CAAP;EACH;;EACD,IAAII,CAAC,KAAKE,MAAM,CAACiB,iBAAjB,EAAoC;IAChC,OAAO,CAAC,GAAGzB,YAAY,CAACwB,OAAjB,EAA0BnB,uBAA1B,CAAP;EACH;;EACD,MAAMqB,MAAM,GAAG3B,eAAe,CAACO,CAAD,CAA9B;EACA,MAAMI,QAAQ,GAAGgB,MAAM,CAAChB,QAAxB;EACA,MAAMK,WAAW,GAAGW,MAAM,CAACX,WAA3B;;EACA,IAAIT,CAAC,GAAG,CAAJ,IAAUA,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAUE,MAAM,CAACe,iBAA1C,EAA8D;IAC1D,OAAO;MAAEpB,IAAI,EAAE,CAAR;MAAWC,IAAI,EAAEe,uBAAuB,CAACT,QAAD,EAAWK,WAAX;IAAxC,CAAP;EACH,CAFD,MAGK;IACD,MAAMY,aAAa,GAAGR,uBAAuB,CAACT,QAAD,EAAW,CAACK,WAAZ,CAA7C;;IACA,IAAIY,aAAa,CAAC,CAAD,CAAb,KAAqB,UAAzB,EAAqC;MACjCA,aAAa,CAAC,CAAD,CAAb,IAAoB,CAApB;MACAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;IACH,CAHD,MAIK;MACDA,aAAa,CAAC,CAAD,CAAb,IAAoB,CAApB;IACH;;IACD,OAAO;MAAExB,IAAI,EAAE,CAAC,CAAT;MAAYC,IAAI,EAAEuB;IAAlB,CAAP;EACH;AACJ;;AACDhC,OAAO,CAACG,aAAR,GAAwBA,aAAxB;;AACA,SAASD,aAAT,CAAuByB,KAAvB,EAA8B;EAC1B,IAAIA,KAAK,CAACnB,IAAN,KAAe,CAAC,CAApB,EAAuB;IACnB,MAAMwB,aAAa,GAAG;MAAExB,IAAI,EAAE,CAAR;MAAWC,IAAI,EAAE,CAACkB,KAAK,CAAClB,IAAN,CAAW,CAAX,CAAD,EAAgBkB,KAAK,CAAClB,IAAN,CAAW,CAAX,CAAhB;IAAjB,CAAtB;;IACA,IAAIuB,aAAa,CAACvB,IAAd,CAAmB,CAAnB,MAA0B,CAA9B,EAAiC;MAC7BuB,aAAa,CAACvB,IAAd,CAAmB,CAAnB,KAAyB,CAAzB;MACAuB,aAAa,CAACvB,IAAd,CAAmB,CAAnB,IAAwB,UAAxB;IACH,CAHD,MAIK;MACDuB,aAAa,CAACvB,IAAd,CAAmB,CAAnB,KAAyB,CAAzB;IACH;;IACD,OAAO,CAACP,aAAa,CAAC8B,aAAD,CAArB;EACH;;EACD,IAAI,CAAC,GAAG3B,YAAY,CAAC4B,SAAjB,EAA4BN,KAA5B,EAAmCpB,uBAAnC,CAAJ,EAAiE;IAC7D,OAAOM,MAAM,CAACe,iBAAd;EACH;;EACD,IAAID,KAAK,CAAClB,IAAN,CAAW,CAAX,IAAgB,QAApB,EAA8B;IAC1B,OAAO,CAACkB,KAAK,CAAClB,IAAN,CAAW,CAAX,IAAgB,WAAhB,GAA8BkB,KAAK,CAAClB,IAAN,CAAW,CAAX,CAA/B,IAAgD,KAAK,CAAC,IAA7D;EACH;;EACD,MAAMyB,aAAa,GAAGP,KAAK,CAAClB,IAAN,CAAW,CAAX,IAAgB,QAAtC;EACA,MAAMM,QAAQ,GAAG,CAAC,IAAD,IAASmB,aAAa,IAAI,EAA1B,CAAjB;EACA,MAAMd,WAAW,GAAG,IAAI,CAAC,CAACc,aAAa,GAAG,OAAjB,IAA4B,KAAK,EAAjC,GAAsCP,KAAK,CAAClB,IAAN,CAAW,CAAX,CAAvC,IAAwDI,MAAM,CAACC,OAAvF;EACA,OAAOM,WAAW,GAAG,KAAKL,QAA1B;AACH;;AACDf,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}
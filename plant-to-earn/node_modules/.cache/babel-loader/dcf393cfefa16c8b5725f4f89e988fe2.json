{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tokenizer = exports.TokenizerMode = void 0;\n\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\n\nconst unicode_js_1 = require(\"../common/unicode.js\");\n\nconst token_js_1 = require(\"../common/token.js\");\n\nconst decode_js_1 = require(\"entities/lib/decode.js\");\n\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\n\nconst html_js_1 = require(\"../common/html.js\"); //C1 Unicode control character reference replacements\n\n\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([[0x80, 8364], [0x82, 8218], [0x83, 402], [0x84, 8222], [0x85, 8230], [0x86, 8224], [0x87, 8225], [0x88, 710], [0x89, 8240], [0x8a, 352], [0x8b, 8249], [0x8c, 338], [0x8e, 381], [0x91, 8216], [0x92, 8217], [0x93, 8220], [0x94, 8221], [0x95, 8226], [0x96, 8211], [0x97, 8212], [0x98, 732], [0x99, 8482], [0x9a, 353], [0x9b, 8250], [0x9c, 339], [0x9e, 382], [0x9f, 376]]); //States\n\nvar State;\n\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n  State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {})); //Tokenizer initial states for different modes\n\n\nexports.TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n}; //Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\n\nfunction isAsciiDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\n\nfunction isWhitespace(cp) {\n  return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\n\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n  return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\n\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n} //Tokenizer\n\n\nclass Tokenizer {\n  constructor(options, handler) {\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.charRefCode = -1;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n  } //Errors\n\n\n  _err(code) {\n    var _a, _b;\n\n    (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n  } // NOTE: `offset` may never run across line boundaries.\n\n\n  getCurrentLocation(offset) {\n    if (!this.options.sourceCodeLocationInfo) {\n      return null;\n    }\n\n    return {\n      startLine: this.preprocessor.line,\n      startCol: this.preprocessor.col - offset,\n      startOffset: this.preprocessor.offset - offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    };\n  }\n\n  _runParsingLoop() {\n    if (this.inLoop) return;\n    this.inLoop = true;\n\n    while (this.active && !this.paused) {\n      this.consumedAfterSnapshot = 0;\n\n      const cp = this._consume();\n\n      if (!this._ensureHibernation()) {\n        this._callState(cp);\n      }\n    }\n\n    this.inLoop = false;\n  } //API\n\n\n  pause() {\n    this.paused = true;\n  }\n\n  resume(writeCallback) {\n    if (!this.paused) {\n      throw new Error('Parser was already resumed');\n    }\n\n    this.paused = false; // Necessary for synchronous resume.\n\n    if (this.inLoop) return;\n\n    this._runParsingLoop();\n\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n\n  write(chunk, isLastChunk, writeCallback) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n\n    this._runParsingLoop();\n\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n\n    this._runParsingLoop();\n  } //Hibernation\n\n\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      this._unconsume(this.consumedAfterSnapshot);\n\n      this.active = false;\n      return true;\n    }\n\n    return false;\n  } //Consumption\n\n\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n\n  _unconsume(count) {\n    this.consumedAfterSnapshot -= count;\n    this.preprocessor.retreat(count);\n  }\n\n  _reconsumeInState(state, cp) {\n    this.state = state;\n\n    this._callState(cp);\n  }\n\n  _advanceBy(count) {\n    this.consumedAfterSnapshot += count;\n\n    for (let i = 0; i < count; i++) {\n      this.preprocessor.advance();\n    }\n  }\n\n  _consumeSequenceIfMatch(pattern, caseSensitive) {\n    if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n      // We will already have consumed one character before calling this method.\n      this._advanceBy(pattern.length - 1);\n\n      return true;\n    }\n\n    return false;\n  } //Token creation\n\n\n  _createStartTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.START_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(1)\n    };\n  }\n\n  _createEndTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.END_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(2)\n    };\n  }\n\n  _createCommentToken(offset) {\n    this.currentToken = {\n      type: token_js_1.TokenType.COMMENT,\n      data: '',\n      location: this.getCurrentLocation(offset)\n    };\n  }\n\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: token_js_1.TokenType.DOCTYPE,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null,\n      location: this.currentLocation\n    };\n  }\n\n  _createCharacterToken(type, chars) {\n    this.currentCharacterToken = {\n      type,\n      chars,\n      location: this.currentLocation\n    };\n  } //Tag attributes\n\n\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n    this.currentLocation = this.getCurrentLocation(0);\n  }\n\n  _leaveAttrName() {\n    var _a;\n\n    var _b;\n\n    const token = this.currentToken;\n\n    if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n      token.attrs.push(this.currentAttr);\n\n      if (token.location && this.currentLocation) {\n        const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n        attrLocations[this.currentAttr.name] = this.currentLocation; // Set end location\n\n        this._leaveAttrValue();\n      }\n    } else {\n      this._err(error_codes_js_1.ERR.duplicateAttribute);\n    }\n  }\n\n  _leaveAttrValue() {\n    if (this.currentLocation) {\n      this.currentLocation.endLine = this.preprocessor.line;\n      this.currentLocation.endCol = this.preprocessor.col;\n      this.currentLocation.endOffset = this.preprocessor.offset;\n    }\n  } //Token emission\n\n\n  prepareToken(ct) {\n    this._emitCurrentCharacterToken(ct.location);\n\n    this.currentToken = null;\n\n    if (ct.location) {\n      ct.location.endLine = this.preprocessor.line;\n      ct.location.endCol = this.preprocessor.col + 1;\n      ct.location.endOffset = this.preprocessor.offset + 1;\n    }\n\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n\n  emitCurrentTagToken() {\n    const ct = this.currentToken;\n    this.prepareToken(ct);\n    ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n\n    if (ct.type === token_js_1.TokenType.START_TAG) {\n      this.lastStartTagName = ct.tagName;\n      this.handler.onStartTag(ct);\n    } else {\n      if (ct.attrs.length > 0) {\n        this._err(error_codes_js_1.ERR.endTagWithAttributes);\n      }\n\n      if (ct.selfClosing) {\n        this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n      }\n\n      this.handler.onEndTag(ct);\n    }\n\n    this.preprocessor.dropParsedChunk();\n  }\n\n  emitCurrentComment(ct) {\n    this.prepareToken(ct);\n    this.handler.onComment(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n\n  emitCurrentDoctype(ct) {\n    this.prepareToken(ct);\n    this.handler.onDoctype(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n\n  _emitCurrentCharacterToken(nextLocation) {\n    if (this.currentCharacterToken) {\n      //NOTE: if we have a pending character token, make it's end location equal to the\n      //current token's start location.\n      if (nextLocation && this.currentCharacterToken.location) {\n        this.currentCharacterToken.location.endLine = nextLocation.startLine;\n        this.currentCharacterToken.location.endCol = nextLocation.startCol;\n        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n      }\n\n      switch (this.currentCharacterToken.type) {\n        case token_js_1.TokenType.CHARACTER:\n          {\n            this.handler.onCharacter(this.currentCharacterToken);\n            break;\n          }\n\n        case token_js_1.TokenType.NULL_CHARACTER:\n          {\n            this.handler.onNullCharacter(this.currentCharacterToken);\n            break;\n          }\n\n        case token_js_1.TokenType.WHITESPACE_CHARACTER:\n          {\n            this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n            break;\n          }\n      }\n\n      this.currentCharacterToken = null;\n    }\n  }\n\n  _emitEOFToken() {\n    const location = this.getCurrentLocation(0);\n\n    if (location) {\n      location.endLine = location.startLine;\n      location.endCol = location.startCol;\n      location.endOffset = location.startOffset;\n    }\n\n    this._emitCurrentCharacterToken(location);\n\n    this.handler.onEof({\n      type: token_js_1.TokenType.EOF,\n      location\n    });\n    this.active = false;\n  } //Characters emission\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, the parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n\n\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken) {\n      if (this.currentCharacterToken.type !== type) {\n        this.currentLocation = this.getCurrentLocation(0);\n\n        this._emitCurrentCharacterToken(this.currentLocation);\n\n        this.preprocessor.dropParsedChunk();\n      } else {\n        this.currentCharacterToken.chars += ch;\n        return;\n      }\n    }\n\n    this._createCharacterToken(type, ch);\n  }\n\n  _emitCodePoint(cp) {\n    const type = isWhitespace(cp) ? token_js_1.TokenType.WHITESPACE_CHARACTER : cp === unicode_js_1.CODE_POINTS.NULL ? token_js_1.TokenType.NULL_CHARACTER : token_js_1.TokenType.CHARACTER;\n\n    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n  } //NOTE: used when we emit characters explicitly.\n  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n\n\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n  } // Character reference helpers\n\n\n  _matchNamedCharacterReference(cp) {\n    let result = null;\n    let excess = 0;\n    let withoutSemicolon = false;\n\n    for (let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n      i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n      if (i < 0) break;\n      excess += 1;\n      current = decode_js_1.htmlDecodeTree[i];\n      const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH; // If the branch is a value, store it and continue\n\n      if (masked) {\n        // The mask is the number of bytes of the value, including the current byte.\n        const valueLength = (masked >> 14) - 1; // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n        // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n\n        if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n          //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n          //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n          result = [unicode_js_1.CODE_POINTS.AMPERSAND]; // Skip over the value.\n\n          i += valueLength;\n        } else {\n          // If this is a surrogate pair, consume the next two bytes.\n          result = valueLength === 0 ? [decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [decode_js_1.htmlDecodeTree[++i]] : [decode_js_1.htmlDecodeTree[++i], decode_js_1.htmlDecodeTree[++i]];\n          excess = 0;\n          withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n        }\n\n        if (valueLength === 0) {\n          // If the value is zero-length, we're done.\n          this._consume();\n\n          break;\n        }\n      }\n    }\n\n    this._unconsume(excess);\n\n    if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n    } // We want to emit the error above on the code point after the entity.\n    // We always consume one code point too many in the loop, and we wait to\n    // unconsume it until after the error is emitted.\n\n\n    this._unconsume(1);\n\n    return result;\n  }\n\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n  }\n\n  _flushCodePointConsumedAsCharacterReference(cp) {\n    if (this._isCharacterReferenceInAttribute()) {\n      this.currentAttr.value += String.fromCodePoint(cp);\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Calling states this way turns out to be much faster than any other approach.\n\n\n  _callState(cp) {\n    switch (this.state) {\n      case State.DATA:\n        {\n          this._stateData(cp);\n\n          break;\n        }\n\n      case State.RCDATA:\n        {\n          this._stateRcdata(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT:\n        {\n          this._stateRawtext(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA:\n        {\n          this._stateScriptData(cp);\n\n          break;\n        }\n\n      case State.PLAINTEXT:\n        {\n          this._statePlaintext(cp);\n\n          break;\n        }\n\n      case State.TAG_OPEN:\n        {\n          this._stateTagOpen(cp);\n\n          break;\n        }\n\n      case State.END_TAG_OPEN:\n        {\n          this._stateEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.TAG_NAME:\n        {\n          this._stateTagName(cp);\n\n          break;\n        }\n\n      case State.RCDATA_LESS_THAN_SIGN:\n        {\n          this._stateRcdataLessThanSign(cp);\n\n          break;\n        }\n\n      case State.RCDATA_END_TAG_OPEN:\n        {\n          this._stateRcdataEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.RCDATA_END_TAG_NAME:\n        {\n          this._stateRcdataEndTagName(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_LESS_THAN_SIGN:\n        {\n          this._stateRawtextLessThanSign(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_END_TAG_OPEN:\n        {\n          this._stateRawtextEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_END_TAG_NAME:\n        {\n          this._stateRawtextEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_END_TAG_OPEN:\n        {\n          this._stateScriptDataEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_END_TAG_NAME:\n        {\n          this._stateScriptDataEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPE_START:\n        {\n          this._stateScriptDataEscapeStart(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPE_START_DASH:\n        {\n          this._stateScriptDataEscapeStartDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED:\n        {\n          this._stateScriptDataEscaped(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_DASH:\n        {\n          this._stateScriptDataEscapedDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataEscapedDashDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataEscapedLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n        {\n          this._stateScriptDataEscapedEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n        {\n          this._stateScriptDataEscapedEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n        {\n          this._stateScriptDataDoubleEscapeStart(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n        {\n          this._stateScriptDataDoubleEscaped(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDashDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataDoubleEscapedLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n        {\n          this._stateScriptDataDoubleEscapeEnd(cp);\n\n          break;\n        }\n\n      case State.BEFORE_ATTRIBUTE_NAME:\n        {\n          this._stateBeforeAttributeName(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_NAME:\n        {\n          this._stateAttributeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_ATTRIBUTE_NAME:\n        {\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case State.BEFORE_ATTRIBUTE_VALUE:\n        {\n          this._stateBeforeAttributeValue(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n        {\n          this._stateAttributeValueDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n        {\n          this._stateAttributeValueSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_UNQUOTED:\n        {\n          this._stateAttributeValueUnquoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n        {\n          this._stateAfterAttributeValueQuoted(cp);\n\n          break;\n        }\n\n      case State.SELF_CLOSING_START_TAG:\n        {\n          this._stateSelfClosingStartTag(cp);\n\n          break;\n        }\n\n      case State.BOGUS_COMMENT:\n        {\n          this._stateBogusComment(cp);\n\n          break;\n        }\n\n      case State.MARKUP_DECLARATION_OPEN:\n        {\n          this._stateMarkupDeclarationOpen(cp);\n\n          break;\n        }\n\n      case State.COMMENT_START:\n        {\n          this._stateCommentStart(cp);\n\n          break;\n        }\n\n      case State.COMMENT_START_DASH:\n        {\n          this._stateCommentStartDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT:\n        {\n          this._stateComment(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN:\n        {\n          this._stateCommentLessThanSign(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG:\n        {\n          this._stateCommentLessThanSignBang(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n        {\n          this._stateCommentLessThanSignBangDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n        {\n          this._stateCommentLessThanSignBangDashDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END_DASH:\n        {\n          this._stateCommentEndDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END:\n        {\n          this._stateCommentEnd(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END_BANG:\n        {\n          this._stateCommentEndBang(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE:\n        {\n          this._stateDoctype(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_NAME:\n        {\n          this._stateBeforeDoctypeName(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_NAME:\n        {\n          this._stateDoctypeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_NAME:\n        {\n          this._stateAfterDoctypeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n        {\n          this._stateAfterDoctypePublicKeyword(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateBeforeDoctypePublicIdentifier(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateAfterDoctypePublicIdentifier(cp);\n\n          break;\n        }\n\n      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n        {\n          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n        {\n          this._stateAfterDoctypeSystemKeyword(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateBeforeDoctypeSystemIdentifier(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateAfterDoctypeSystemIdentifier(cp);\n\n          break;\n        }\n\n      case State.BOGUS_DOCTYPE:\n        {\n          this._stateBogusDoctype(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION:\n        {\n          this._stateCdataSection(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION_BRACKET:\n        {\n          this._stateCdataSectionBracket(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION_END:\n        {\n          this._stateCdataSectionEnd(cp);\n\n          break;\n        }\n\n      case State.CHARACTER_REFERENCE:\n        {\n          this._stateCharacterReference(cp);\n\n          break;\n        }\n\n      case State.NAMED_CHARACTER_REFERENCE:\n        {\n          this._stateNamedCharacterReference(cp);\n\n          break;\n        }\n\n      case State.AMBIGUOUS_AMPERSAND:\n        {\n          this._stateAmbiguousAmpersand(cp);\n\n          break;\n        }\n\n      case State.NUMERIC_CHARACTER_REFERENCE:\n        {\n          this._stateNumericCharacterReference(cp);\n\n          break;\n        }\n\n      case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n        {\n          this._stateHexademicalCharacterReferenceStart(cp);\n\n          break;\n        }\n\n      case State.HEXADEMICAL_CHARACTER_REFERENCE:\n        {\n          this._stateHexademicalCharacterReference(cp);\n\n          break;\n        }\n\n      case State.DECIMAL_CHARACTER_REFERENCE:\n        {\n          this._stateDecimalCharacterReference(cp);\n\n          break;\n        }\n\n      case State.NUMERIC_CHARACTER_REFERENCE_END:\n        {\n          this._stateNumericCharacterReferenceEnd(cp);\n\n          break;\n        }\n\n      default:\n        {\n          throw new Error('Unknown state');\n        }\n    }\n  } // State machine\n  // Data state\n  //------------------------------------------------------------------\n\n\n  _stateData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.TAG_OPEN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.DATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitCodePoint(cp);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } //  RCDATA state\n  //------------------------------------------------------------------\n\n\n  _stateRcdata(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.RCDATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RCDATA_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // RAWTEXT state\n  //------------------------------------------------------------------\n\n\n  _stateRawtext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RAWTEXT_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data state\n  //------------------------------------------------------------------\n\n\n  _stateScriptData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // PLAINTEXT state\n  //------------------------------------------------------------------\n\n\n  _statePlaintext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Tag open state\n  //------------------------------------------------------------------\n\n\n  _stateTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n\n      this.state = State.TAG_NAME;\n\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.MARKUP_DECLARATION_OPEN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.END_TAG_OPEN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUESTION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n\n          this._createCommentToken(1);\n\n          this.state = State.BOGUS_COMMENT;\n\n          this._stateBogusComment(cp);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n\n          this._emitChars('<');\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n\n          this._emitChars('<');\n\n          this.state = State.DATA;\n\n          this._stateData(cp);\n        }\n    }\n  } // End tag open state\n  //------------------------------------------------------------------\n\n\n  _stateEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this.state = State.TAG_NAME;\n\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingEndTagName);\n\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n\n          this._emitChars('</');\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n\n          this._createCommentToken(2);\n\n          this.state = State.BOGUS_COMMENT;\n\n          this._stateBogusComment(cp);\n        }\n    }\n  } // Tag name state\n  //------------------------------------------------------------------\n\n\n  _stateTagName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // RCDATA less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RCDATA_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  } // RCDATA end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RCDATA_END_TAG_NAME;\n\n      this._stateRcdataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  }\n\n  handleSpecialEndTag(_cp) {\n    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n      return !this._ensureHibernation();\n    }\n\n    this._createEndTagToken();\n\n    const token = this.currentToken;\n    token.tagName = this.lastStartTagName;\n    const cp = this.preprocessor.peek(this.lastStartTagName.length);\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          return false;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.state = State.SELF_CLOSING_START_TAG;\n          return false;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.emitCurrentTagToken();\n          this.state = State.DATA;\n          return false;\n        }\n\n      default:\n        {\n          return !this._ensureHibernation();\n        }\n    }\n  } // RCDATA end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  } // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RAWTEXT_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RAWTEXT_END_TAG_NAME;\n\n      this._stateRawtextEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // Script data less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataLessThanSign(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPE_START;\n\n          this._emitChars('<!');\n\n          break;\n        }\n\n      default:\n        {\n          this._emitChars('<');\n\n          this.state = State.SCRIPT_DATA;\n\n          this._stateScriptData(cp);\n        }\n    }\n  } // Script data end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_END_TAG_NAME;\n\n      this._stateScriptDataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escape start state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapeStart(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escape start dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapeStartDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escaped state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n\n          this._emitChars('>');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n    } else if (isAsciiLetter(cp)) {\n      this._emitChars('<');\n\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n\n      this._stateScriptDataDoubleEscapeStart(cp);\n    } else {\n      this._emitChars('<');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data escaped end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n\n      this._stateScriptDataEscapedEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data escaped end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data double escape start state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapeStart(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data double escaped state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n\n          this._emitChars('>');\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n\n      this._emitChars('/');\n    } else {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  } // Script data double escape end state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapeEnd(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  } // Before attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n\n          this._createAttr('=');\n\n          this.state = State.ATTRIBUTE_NAME;\n          break;\n        }\n\n      default:\n        {\n          this._createAttr('');\n\n          this.state = State.ATTRIBUTE_NAME;\n\n          this._stateAttributeName(cp);\n        }\n    }\n  } // Attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._leaveAttrName();\n\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._leaveAttrName();\n\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n\n          this.currentAttr.name += String.fromCodePoint(cp);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // After attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateAfterAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._createAttr('');\n\n          this.state = State.ATTRIBUTE_NAME;\n\n          this._stateAttributeName(cp);\n        }\n    }\n  } // Before attribute value state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeAttributeValue(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingAttributeValue);\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      default:\n        {\n          this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n\n          this._stateAttributeValueUnquoted(cp);\n        }\n    }\n  } // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueDoubleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueSingleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueUnquoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n      case unicode_js_1.CODE_POINTS.GRAVE_ACCENT:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n\n          this.currentAttr.value += String.fromCodePoint(cp);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // After attribute value (quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAfterAttributeValueQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  } // Self-closing start tag state\n  //------------------------------------------------------------------\n\n\n  _stateSelfClosingStartTag(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          const token = this.currentToken;\n          token.selfClosing = true;\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  } // Bogus comment state\n  //------------------------------------------------------------------\n\n\n  _stateBogusComment(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  } // Markup declaration open state\n  //------------------------------------------------------------------\n\n\n  _stateMarkupDeclarationOpen(cp) {\n    if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n      this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n\n      this.state = State.COMMENT_START;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n      // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n      this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n      this.state = State.DOCTYPE;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n      if (this.inForeignNode) {\n        this.state = State.CDATA_SECTION;\n      } else {\n        this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n\n        this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n\n        this.currentToken.data = '[CDATA[';\n        this.state = State.BOGUS_COMMENT;\n      }\n    } //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n\n      this._createCommentToken(2);\n\n      this.state = State.BOGUS_COMMENT;\n\n      this._stateBogusComment(cp);\n    }\n  } // Comment start state\n  //------------------------------------------------------------------\n\n\n  _stateCommentStart(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_START_DASH;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n\n          this.state = State.DATA;\n          const token = this.currentToken;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      default:\n        {\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment start dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentStartDash(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment state\n  //------------------------------------------------------------------\n\n\n  _stateComment(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          this.state = State.COMMENT_LESS_THAN_SIGN;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  } // Comment less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSign(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          token.data += '!';\n          this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          break;\n        }\n\n      default:\n        {\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment less-than sign bang state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBang(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n    } else {\n      this.state = State.COMMENT;\n\n      this._stateComment(cp);\n    }\n  } // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBangDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n    } else {\n      this.state = State.COMMENT_END_DASH;\n\n      this._stateCommentEndDash(cp);\n    }\n  } // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBangDashDash(cp) {\n    if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n      this._err(error_codes_js_1.ERR.nestedComment);\n    }\n\n    this.state = State.COMMENT_END;\n\n    this._stateCommentEnd(cp);\n  } // Comment end dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEndDash(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment end state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEnd(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.COMMENT_END_BANG;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '-';\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '--';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment end bang state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEndBang(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  _stateDoctype(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n\n          this._stateBeforeDoctypeName(cp);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n\n          this.state = State.BEFORE_DOCTYPE_NAME;\n\n          this._stateBeforeDoctypeName(cp);\n        }\n    }\n  } // Before DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypeName(cp) {\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n\n      this.state = State.DOCTYPE_NAME;\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n\n          this.state = State.DOCTYPE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeName);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._createDoctypeToken(String.fromCodePoint(cp));\n\n          this.state = State.DOCTYPE_NAME;\n        }\n    }\n  } // DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.AFTER_DOCTYPE_NAME;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // After DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n        } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n        } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n          this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n\n    }\n  } // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypePublicKeyword(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  } // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypePublicIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  } // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n\n\n  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeSystemKeyword(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  } // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  } // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  _stateBogusDoctype(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  } // CDATA section state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSection(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this.state = State.CDATA_SECTION_BRACKET;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInCdata);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // CDATA section bracket state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSectionBracket(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n      this.state = State.CDATA_SECTION_END;\n    } else {\n      this._emitChars(']');\n\n      this.state = State.CDATA_SECTION;\n\n      this._stateCdataSection(cp);\n    }\n  } // CDATA section end state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSectionEnd(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          break;\n        }\n\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this._emitChars(']');\n\n          break;\n        }\n\n      default:\n        {\n          this._emitChars(']]');\n\n          this.state = State.CDATA_SECTION;\n\n          this._stateCdataSection(cp);\n        }\n    }\n  } // Character reference state\n  //------------------------------------------------------------------\n\n\n  _stateCharacterReference(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this.state = State.NAMED_CHARACTER_REFERENCE;\n\n      this._stateNamedCharacterReference(cp);\n    } else {\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Named character reference state\n  //------------------------------------------------------------------\n\n\n  _stateNamedCharacterReference(cp) {\n    const matchResult = this._matchNamedCharacterReference(cp); //NOTE: Matching can be abrupted by hibernation. In that case, match\n    //results are no longer valid and we will need to start over.\n\n\n    if (this._ensureHibernation()) {// Stay in the state, try again.\n    } else if (matchResult) {\n      for (let i = 0; i < matchResult.length; i++) {\n        this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n      }\n\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n\n      this.state = State.AMBIGUOUS_AMPERSAND;\n    }\n  } // Ambiguos ampersand state\n  //------------------------------------------------------------------\n\n\n  _stateAmbiguousAmpersand(cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    } else {\n      if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n        this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n      }\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Numeric character reference state\n  //------------------------------------------------------------------\n\n\n  _stateNumericCharacterReference(cp) {\n    this.charRefCode = 0;\n\n    if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n    } // Inlined decimal character reference start state\n    else if (isAsciiDigit(cp)) {\n      this.state = State.DECIMAL_CHARACTER_REFERENCE;\n\n      this._stateDecimalCharacterReference(cp);\n    } else {\n      this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Hexademical character reference start state\n  //------------------------------------------------------------------\n\n\n  _stateHexademicalCharacterReferenceStart(cp) {\n    if (isAsciiHexDigit(cp)) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n\n      this._stateHexademicalCharacterReference(cp);\n    } else {\n      this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n\n      this._unconsume(2);\n\n      this.state = this.returnState;\n    }\n  } // Hexademical character reference state\n  //------------------------------------------------------------------\n\n\n  _stateHexademicalCharacterReference(cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  } // Decimal character reference state\n  //------------------------------------------------------------------\n\n\n  _stateDecimalCharacterReference(cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  } // Numeric character reference end state\n  //------------------------------------------------------------------\n\n\n  _stateNumericCharacterReferenceEnd(cp) {\n    if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n      this._err(error_codes_js_1.ERR.nullCharacterReference);\n\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 1114111) {\n      this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n      this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n      this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n    } else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n      this._err(error_codes_js_1.ERR.controlCharacterReference);\n\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n\n      if (replacement !== undefined) {\n        this.charRefCode = replacement;\n      }\n    }\n\n    this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n\n    this._reconsumeInState(this.returnState, cp);\n  }\n\n}\n\nexports.Tokenizer = Tokenizer;","map":{"version":3,"names":["Object","defineProperty","exports","value","Tokenizer","TokenizerMode","preprocessor_js_1","require","unicode_js_1","token_js_1","decode_js_1","error_codes_js_1","html_js_1","C1_CONTROLS_REFERENCE_REPLACEMENTS","Map","State","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","CODE_POINTS","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isEntityInAttributeInvalidEnd","nextCp","EQUALS_SIGN","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","constructor","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","charRefCode","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","preprocessor","Preprocessor","currentLocation","getCurrentLocation","_err","code","_a","_b","onParseError","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","_unconsume","advance","count","retreat","_reconsumeInState","_advanceBy","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","length","_createStartTagToken","type","TokenType","START_TAG","tagName","tagID","TAG_ID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","getTokenAttr","push","attrLocations","create","_leaveAttrValue","ERR","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","getTagID","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","NULL","String","fromCodePoint","_emitChars","_matchNamedCharacterReference","result","excess","withoutSemicolon","current","htmlDecodeTree","determineBranch","masked","BinTrieFlags","VALUE_LENGTH","valueLength","SEMICOLON","_isCharacterReferenceInAttribute","peek","AMPERSAND","missingSemicolonAfterCharacterReference","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_flushCodePointConsumedAsCharacterReference","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","CHARACTER_REFERENCE","_stateCharacterReference","NAMED_CHARACTER_REFERENCE","_stateNamedCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","NUMERIC_CHARACTER_REFERENCE","_stateNumericCharacterReference","HEXADEMICAL_CHARACTER_REFERENCE_START","_stateHexademicalCharacterReferenceStart","HEXADEMICAL_CHARACTER_REFERENCE","_stateHexademicalCharacterReference","DECIMAL_CHARACTER_REFERENCE","_stateDecimalCharacterReference","NUMERIC_CHARACTER_REFERENCE_END","_stateNumericCharacterReferenceEnd","LESS_THAN_SIGN","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SEQUENCES","SCRIPT","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","get","undefined"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/cheerio/node_modules/parse5/dist/cjs/tokenizer/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst token_js_1 = require(\"../common/token.js\");\nconst decode_js_1 = require(\"entities/lib/decode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst html_js_1 = require(\"../common/html.js\");\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [0x80, 8364],\n    [0x82, 8218],\n    [0x83, 402],\n    [0x84, 8222],\n    [0x85, 8230],\n    [0x86, 8224],\n    [0x87, 8225],\n    [0x88, 710],\n    [0x89, 8240],\n    [0x8a, 352],\n    [0x8b, 8249],\n    [0x8c, 338],\n    [0x8e, 381],\n    [0x91, 8216],\n    [0x92, 8217],\n    [0x93, 8220],\n    [0x94, 8221],\n    [0x95, 8226],\n    [0x96, 8211],\n    [0x97, 8212],\n    [0x98, 732],\n    [0x99, 8482],\n    [0x9a, 353],\n    [0x9b, 8250],\n    [0x9c, 339],\n    [0x9e, 382],\n    [0x9f, 376],\n]);\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.START_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.END_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: token_js_1.TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: token_js_1.TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(error_codes_js_1.ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n        if (ct.type === token_js_1.TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(error_codes_js_1.ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case token_js_1.TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: token_js_1.TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n            else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? token_js_1.TokenType.WHITESPACE_CHARACTER\n            : cp === unicode_js_1.CODE_POINTS.NULL\n                ? token_js_1.TokenType.NULL_CHARACTER\n                : token_js_1.TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n            excess += 1;\n            current = decode_js_1.htmlDecodeTree[i];\n            const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON &&\n                    this._isCharacterReferenceInAttribute() &&\n                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [unicode_js_1.CODE_POINTS.AMPERSAND];\n                    // Skip over the value.\n                    i += valueLength;\n                }\n                else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result =\n                        valueLength === 0\n                            ? [decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH]\n                            : valueLength === 1\n                                ? [decode_js_1.htmlDecodeTree[++i]]\n                                : [decode_js_1.htmlDecodeTree[++i], decode_js_1.htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference(cp);\n                break;\n            }\n            case State.NAMED_CHARACTER_REFERENCE: {\n                this._stateNamedCharacterReference(cp);\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE: {\n                this._stateNumericCharacterReference(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {\n                this._stateHexademicalCharacterReferenceStart(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE: {\n                this._stateHexademicalCharacterReference(cp);\n                break;\n            }\n            case State.DECIMAL_CHARACTER_REFERENCE: {\n                this._stateDecimalCharacterReference(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE_END: {\n                this._stateNumericCharacterReferenceEnd(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.DATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.RCDATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.QUESTION_MARK: {\n                    this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n            case unicode_js_1.CODE_POINTS.GRAVE_ACCENT: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n            this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n                this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n            this._err(error_codes_js_1.ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.SPACE:\n                case unicode_js_1.CODE_POINTS.LINE_FEED:\n                case unicode_js_1.CODE_POINTS.TABULATION:\n                case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.NULL: {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n                if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        }\n        else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            // Stay in the state, try again.\n        }\n        else if (matchResult) {\n            for (let i = 0; i < matchResult.length; i++) {\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n                this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n        else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        }\n        else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        }\n        else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n            this._err(error_codes_js_1.ERR.nullCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if (this.charRefCode > 1114111) {\n            this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n        }\n        else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(error_codes_js_1.ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\nexports.Tokenizer = Tokenizer;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}
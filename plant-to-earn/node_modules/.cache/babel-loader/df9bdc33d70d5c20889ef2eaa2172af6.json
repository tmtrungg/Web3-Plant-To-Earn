{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.patternsToStringUnmapperFor = exports.patternsToStringMapper = void 0;\n\nconst MaxLengthFromMinLength_1 = require(\"../helpers/MaxLengthFromMinLength\");\n\nfunction patternsToStringMapper(tab) {\n  return tab.join('');\n}\n\nexports.patternsToStringMapper = patternsToStringMapper;\n\nfunction patternsToStringUnmapperFor(patternsArb, constraints) {\n  return function patternsToStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported value');\n    }\n\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthFromMinLength_1.MaxLengthUpperBound;\n\n    if (value.length === 0) {\n      if (minLength > 0) {\n        throw new Error('Unable to unmap received string');\n      }\n\n      return [];\n    }\n\n    const stack = [{\n      endIndexChunks: 0,\n      nextStartIndex: 1,\n      chunks: []\n    }];\n\n    while (stack.length > 0) {\n      const last = stack.pop();\n\n      for (let index = last.nextStartIndex; index <= value.length; ++index) {\n        const chunk = value.substring(last.endIndexChunks, index);\n\n        if (patternsArb.canShrinkWithoutContext(chunk)) {\n          const newChunks = last.chunks.concat([chunk]);\n\n          if (index === value.length) {\n            if (newChunks.length < minLength || newChunks.length > maxLength) {\n              break;\n            }\n\n            return newChunks;\n          }\n\n          stack.push({\n            endIndexChunks: last.endIndexChunks,\n            nextStartIndex: index + 1,\n            chunks: last.chunks\n          });\n          stack.push({\n            endIndexChunks: index,\n            nextStartIndex: index + 1,\n            chunks: newChunks\n          });\n          break;\n        }\n      }\n    }\n\n    throw new Error('Unable to unmap received string');\n  };\n}\n\nexports.patternsToStringUnmapperFor = patternsToStringUnmapperFor;","map":{"version":3,"names":["Object","defineProperty","exports","value","patternsToStringUnmapperFor","patternsToStringMapper","MaxLengthFromMinLength_1","require","tab","join","patternsArb","constraints","patternsToStringUnmapper","Error","minLength","undefined","maxLength","MaxLengthUpperBound","length","stack","endIndexChunks","nextStartIndex","chunks","last","pop","index","chunk","substring","canShrinkWithoutContext","newChunks","concat","push"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/mappers/PatternsToString.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.patternsToStringUnmapperFor = exports.patternsToStringMapper = void 0;\nconst MaxLengthFromMinLength_1 = require(\"../helpers/MaxLengthFromMinLength\");\nfunction patternsToStringMapper(tab) {\n    return tab.join('');\n}\nexports.patternsToStringMapper = patternsToStringMapper;\nfunction patternsToStringUnmapperFor(patternsArb, constraints) {\n    return function patternsToStringUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported value');\n        }\n        const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n        const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthFromMinLength_1.MaxLengthUpperBound;\n        if (value.length === 0) {\n            if (minLength > 0) {\n                throw new Error('Unable to unmap received string');\n            }\n            return [];\n        }\n        const stack = [{ endIndexChunks: 0, nextStartIndex: 1, chunks: [] }];\n        while (stack.length > 0) {\n            const last = stack.pop();\n            for (let index = last.nextStartIndex; index <= value.length; ++index) {\n                const chunk = value.substring(last.endIndexChunks, index);\n                if (patternsArb.canShrinkWithoutContext(chunk)) {\n                    const newChunks = last.chunks.concat([chunk]);\n                    if (index === value.length) {\n                        if (newChunks.length < minLength || newChunks.length > maxLength) {\n                            break;\n                        }\n                        return newChunks;\n                    }\n                    stack.push({ endIndexChunks: last.endIndexChunks, nextStartIndex: index + 1, chunks: last.chunks });\n                    stack.push({ endIndexChunks: index, nextStartIndex: index + 1, chunks: newChunks });\n                    break;\n                }\n            }\n        }\n        throw new Error('Unable to unmap received string');\n    };\n}\nexports.patternsToStringUnmapperFor = patternsToStringUnmapperFor;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsCF,OAAO,CAACG,sBAAR,GAAiC,KAAK,CAA5E;;AACA,MAAMC,wBAAwB,GAAGC,OAAO,CAAC,mCAAD,CAAxC;;AACA,SAASF,sBAAT,CAAgCG,GAAhC,EAAqC;EACjC,OAAOA,GAAG,CAACC,IAAJ,CAAS,EAAT,CAAP;AACH;;AACDP,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AACA,SAASD,2BAAT,CAAqCM,WAArC,EAAkDC,WAAlD,EAA+D;EAC3D,OAAO,SAASC,wBAAT,CAAkCT,KAAlC,EAAyC;IAC5C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3B,MAAM,IAAIU,KAAJ,CAAU,mBAAV,CAAN;IACH;;IACD,MAAMC,SAAS,GAAGH,WAAW,CAACG,SAAZ,KAA0BC,SAA1B,GAAsCJ,WAAW,CAACG,SAAlD,GAA8D,CAAhF;IACA,MAAME,SAAS,GAAGL,WAAW,CAACK,SAAZ,KAA0BD,SAA1B,GAAsCJ,WAAW,CAACK,SAAlD,GAA8DV,wBAAwB,CAACW,mBAAzG;;IACA,IAAId,KAAK,CAACe,MAAN,KAAiB,CAArB,EAAwB;MACpB,IAAIJ,SAAS,GAAG,CAAhB,EAAmB;QACf,MAAM,IAAID,KAAJ,CAAU,iCAAV,CAAN;MACH;;MACD,OAAO,EAAP;IACH;;IACD,MAAMM,KAAK,GAAG,CAAC;MAAEC,cAAc,EAAE,CAAlB;MAAqBC,cAAc,EAAE,CAArC;MAAwCC,MAAM,EAAE;IAAhD,CAAD,CAAd;;IACA,OAAOH,KAAK,CAACD,MAAN,GAAe,CAAtB,EAAyB;MACrB,MAAMK,IAAI,GAAGJ,KAAK,CAACK,GAAN,EAAb;;MACA,KAAK,IAAIC,KAAK,GAAGF,IAAI,CAACF,cAAtB,EAAsCI,KAAK,IAAItB,KAAK,CAACe,MAArD,EAA6D,EAAEO,KAA/D,EAAsE;QAClE,MAAMC,KAAK,GAAGvB,KAAK,CAACwB,SAAN,CAAgBJ,IAAI,CAACH,cAArB,EAAqCK,KAArC,CAAd;;QACA,IAAIf,WAAW,CAACkB,uBAAZ,CAAoCF,KAApC,CAAJ,EAAgD;UAC5C,MAAMG,SAAS,GAAGN,IAAI,CAACD,MAAL,CAAYQ,MAAZ,CAAmB,CAACJ,KAAD,CAAnB,CAAlB;;UACA,IAAID,KAAK,KAAKtB,KAAK,CAACe,MAApB,EAA4B;YACxB,IAAIW,SAAS,CAACX,MAAV,GAAmBJ,SAAnB,IAAgCe,SAAS,CAACX,MAAV,GAAmBF,SAAvD,EAAkE;cAC9D;YACH;;YACD,OAAOa,SAAP;UACH;;UACDV,KAAK,CAACY,IAAN,CAAW;YAAEX,cAAc,EAAEG,IAAI,CAACH,cAAvB;YAAuCC,cAAc,EAAEI,KAAK,GAAG,CAA/D;YAAkEH,MAAM,EAAEC,IAAI,CAACD;UAA/E,CAAX;UACAH,KAAK,CAACY,IAAN,CAAW;YAAEX,cAAc,EAAEK,KAAlB;YAAyBJ,cAAc,EAAEI,KAAK,GAAG,CAAjD;YAAoDH,MAAM,EAAEO;UAA5D,CAAX;UACA;QACH;MACJ;IACJ;;IACD,MAAM,IAAIhB,KAAJ,CAAU,iCAAV,CAAN;EACH,CAhCD;AAiCH;;AACDX,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC"},"metadata":{},"sourceType":"script"}
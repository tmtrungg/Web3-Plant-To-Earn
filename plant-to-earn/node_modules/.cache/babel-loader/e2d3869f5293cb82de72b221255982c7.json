{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunExecution = void 0;\n\nconst VerbosityLevel_1 = require(\"../configuration/VerbosityLevel\");\n\nconst ExecutionStatus_1 = require(\"./ExecutionStatus\");\n\nclass RunExecution {\n  constructor(verbosity, interruptedAsFailure) {\n    this.verbosity = verbosity;\n    this.interruptedAsFailure = interruptedAsFailure;\n\n    this.isSuccess = () => this.pathToFailure == null;\n\n    this.firstFailure = () => this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1;\n\n    this.numShrinks = () => this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0;\n\n    this.rootExecutionTrees = [];\n    this.currentLevelExecutionTrees = this.rootExecutionTrees;\n    this.failure = null;\n    this.numSkips = 0;\n    this.numSuccesses = 0;\n    this.interrupted = false;\n  }\n\n  appendExecutionTree(status, value) {\n    const currentTree = {\n      status,\n      value,\n      children: []\n    };\n    this.currentLevelExecutionTrees.push(currentTree);\n    return currentTree;\n  }\n\n  fail(value, id, failure) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.Verbose) {\n      const currentTree = this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Failure, value);\n      this.currentLevelExecutionTrees = currentTree.children;\n    }\n\n    if (this.pathToFailure == null) this.pathToFailure = `${id}`;else this.pathToFailure += `:${id}`;\n    this.value = value;\n    this.failure = failure;\n  }\n\n  skip(value) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Skipped, value);\n    }\n\n    if (this.pathToFailure == null) {\n      ++this.numSkips;\n    }\n  }\n\n  success(value) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Success, value);\n    }\n\n    if (this.pathToFailure == null) {\n      ++this.numSuccesses;\n    }\n  }\n\n  interrupt() {\n    this.interrupted = true;\n  }\n\n  extractFailures() {\n    if (this.isSuccess()) {\n      return [];\n    }\n\n    const failures = [];\n    let cursor = this.rootExecutionTrees;\n\n    while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus_1.ExecutionStatus.Failure) {\n      const failureTree = cursor[cursor.length - 1];\n      failures.push(failureTree.value);\n      cursor = failureTree.children;\n    }\n\n    return failures;\n  }\n\n  toRunDetails(seed, basePath, maxSkips, qParams) {\n    if (!this.isSuccess()) {\n      return {\n        failed: true,\n        interrupted: this.interrupted,\n        numRuns: this.firstFailure() + 1 - this.numSkips,\n        numSkips: this.numSkips,\n        numShrinks: this.numShrinks(),\n        seed,\n        counterexample: this.value,\n        counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n        error: this.failure.errorMessage,\n        errorInstance: this.failure.error,\n        failures: this.extractFailures(),\n        executionSummary: this.rootExecutionTrees,\n        verbose: this.verbosity,\n        runConfiguration: qParams.toParameters()\n      };\n    }\n\n    const failed = this.numSkips > maxSkips || this.interrupted && this.interruptedAsFailure;\n    return {\n      failed,\n      interrupted: this.interrupted,\n      numRuns: this.numSuccesses,\n      numSkips: this.numSkips,\n      numShrinks: 0,\n      seed,\n      counterexample: null,\n      counterexamplePath: null,\n      error: null,\n      errorInstance: null,\n      failures: [],\n      executionSummary: this.rootExecutionTrees,\n      verbose: this.verbosity,\n      runConfiguration: qParams.toParameters()\n    };\n  }\n\n}\n\nexports.RunExecution = RunExecution;\n\nRunExecution.mergePaths = (offsetPath, path) => {\n  if (offsetPath.length === 0) return path;\n  const offsetItems = offsetPath.split(':');\n  const remainingItems = path.split(':');\n  const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n  return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","RunExecution","VerbosityLevel_1","require","ExecutionStatus_1","constructor","verbosity","interruptedAsFailure","isSuccess","pathToFailure","firstFailure","split","numShrinks","length","rootExecutionTrees","currentLevelExecutionTrees","failure","numSkips","numSuccesses","interrupted","appendExecutionTree","status","currentTree","children","push","fail","id","VerbosityLevel","Verbose","ExecutionStatus","Failure","skip","VeryVerbose","Skipped","success","Success","interrupt","extractFailures","failures","cursor","failureTree","toRunDetails","seed","basePath","maxSkips","qParams","failed","numRuns","counterexample","counterexamplePath","mergePaths","error","errorMessage","errorInstance","executionSummary","verbose","runConfiguration","toParameters","offsetPath","path","offsetItems","remainingItems","middle","slice","join"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/check/runner/reporter/RunExecution.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunExecution = void 0;\nconst VerbosityLevel_1 = require(\"../configuration/VerbosityLevel\");\nconst ExecutionStatus_1 = require(\"./ExecutionStatus\");\nclass RunExecution {\n    constructor(verbosity, interruptedAsFailure) {\n        this.verbosity = verbosity;\n        this.interruptedAsFailure = interruptedAsFailure;\n        this.isSuccess = () => this.pathToFailure == null;\n        this.firstFailure = () => (this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1);\n        this.numShrinks = () => (this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0);\n        this.rootExecutionTrees = [];\n        this.currentLevelExecutionTrees = this.rootExecutionTrees;\n        this.failure = null;\n        this.numSkips = 0;\n        this.numSuccesses = 0;\n        this.interrupted = false;\n    }\n    appendExecutionTree(status, value) {\n        const currentTree = { status, value, children: [] };\n        this.currentLevelExecutionTrees.push(currentTree);\n        return currentTree;\n    }\n    fail(value, id, failure) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.Verbose) {\n            const currentTree = this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Failure, value);\n            this.currentLevelExecutionTrees = currentTree.children;\n        }\n        if (this.pathToFailure == null)\n            this.pathToFailure = `${id}`;\n        else\n            this.pathToFailure += `:${id}`;\n        this.value = value;\n        this.failure = failure;\n    }\n    skip(value) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Skipped, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSkips;\n        }\n    }\n    success(value) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Success, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSuccesses;\n        }\n    }\n    interrupt() {\n        this.interrupted = true;\n    }\n    extractFailures() {\n        if (this.isSuccess()) {\n            return [];\n        }\n        const failures = [];\n        let cursor = this.rootExecutionTrees;\n        while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus_1.ExecutionStatus.Failure) {\n            const failureTree = cursor[cursor.length - 1];\n            failures.push(failureTree.value);\n            cursor = failureTree.children;\n        }\n        return failures;\n    }\n    toRunDetails(seed, basePath, maxSkips, qParams) {\n        if (!this.isSuccess()) {\n            return {\n                failed: true,\n                interrupted: this.interrupted,\n                numRuns: this.firstFailure() + 1 - this.numSkips,\n                numSkips: this.numSkips,\n                numShrinks: this.numShrinks(),\n                seed,\n                counterexample: this.value,\n                counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n                error: this.failure.errorMessage,\n                errorInstance: this.failure.error,\n                failures: this.extractFailures(),\n                executionSummary: this.rootExecutionTrees,\n                verbose: this.verbosity,\n                runConfiguration: qParams.toParameters(),\n            };\n        }\n        const failed = this.numSkips > maxSkips || (this.interrupted && this.interruptedAsFailure);\n        return {\n            failed,\n            interrupted: this.interrupted,\n            numRuns: this.numSuccesses,\n            numSkips: this.numSkips,\n            numShrinks: 0,\n            seed,\n            counterexample: null,\n            counterexamplePath: null,\n            error: null,\n            errorInstance: null,\n            failures: [],\n            executionSummary: this.rootExecutionTrees,\n            verbose: this.verbosity,\n            runConfiguration: qParams.toParameters(),\n        };\n    }\n}\nexports.RunExecution = RunExecution;\nRunExecution.mergePaths = (offsetPath, path) => {\n    if (offsetPath.length === 0)\n        return path;\n    const offsetItems = offsetPath.split(':');\n    const remainingItems = path.split(':');\n    const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n    return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
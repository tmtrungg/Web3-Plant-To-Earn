{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeNonAsciiHTML = exports.encodeHTML = void 0;\n\nvar encode_html_js_1 = __importDefault(require(\"./generated/encode-html.js\"));\n\nvar escape_js_1 = require(\"./escape.js\");\n\nvar htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\n\nfunction encodeHTML(data) {\n  return encodeHTMLTrieRe(htmlReplacer, data);\n}\n\nexports.encodeHTML = encodeHTML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\n\nfunction encodeNonAsciiHTML(data) {\n  return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);\n}\n\nexports.encodeNonAsciiHTML = encodeNonAsciiHTML;\n\nfunction encodeHTMLTrieRe(regExp, str) {\n  var ret = \"\";\n  var lastIdx = 0;\n  var match;\n\n  while ((match = regExp.exec(str)) !== null) {\n    var i = match.index;\n    ret += str.substring(lastIdx, i);\n    var char = str.charCodeAt(i);\n    var next = encode_html_js_1.default.get(char);\n\n    if (typeof next === \"object\") {\n      // We are in a branch. Try to match the next char.\n      if (i + 1 < str.length) {\n        var nextChar = str.charCodeAt(i + 1);\n        var value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n\n        if (value !== undefined) {\n          ret += value;\n          lastIdx = regExp.lastIndex += 1;\n          continue;\n        }\n      }\n\n      next = next.v;\n    } // We might have a tree node without a value; skip and use a numeric entitiy.\n\n\n    if (next !== undefined) {\n      ret += next;\n      lastIdx = i + 1;\n    } else {\n      var cp = (0, escape_js_1.getCodePoint)(str, i);\n      ret += \"&#x\".concat(cp.toString(16), \";\"); // Increase by 1 if we have a surrogate pair\n\n      lastIdx = regExp.lastIndex += Number(cp !== char);\n    }\n  }\n\n  return ret + str.substr(lastIdx);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,YAAY,GAAG,qCAArB;AAEA;;;;;;;;;;;;AAWA,SAAgBC,UAAhB,CAA2BC,IAA3B,EAAuC;EACnC,OAAOC,gBAAgB,CAACH,YAAD,EAAeE,IAAf,CAAvB;AACH;;AAFDE;AAGA;;;;;;;;;AAQA,SAAgBC,kBAAhB,CAAmCH,IAAnC,EAA+C;EAC3C,OAAOC,gBAAgB,CAACG,uBAAD,EAAcJ,IAAd,CAAvB;AACH;;AAFDE;;AAIA,SAASD,gBAAT,CAA0BI,MAA1B,EAA0CC,GAA1C,EAAqD;EACjD,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,OAAO,GAAG,CAAd;EACA,IAAIC,KAAJ;;EAEA,OAAO,CAACA,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAYJ,GAAZ,CAAT,MAA+B,IAAtC,EAA4C;IACxC,IAAMK,CAAC,GAAGF,KAAK,CAACG,KAAhB;IACAL,GAAG,IAAID,GAAG,CAACO,SAAJ,CAAcL,OAAd,EAAuBG,CAAvB,CAAP;IACA,IAAMG,IAAI,GAAGR,GAAG,CAACS,UAAJ,CAAeJ,CAAf,CAAb;IACA,IAAIK,IAAI,GAAGC,yBAASC,GAAT,CAAaJ,IAAb,CAAX;;IAEA,IAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;MAC1B;MACA,IAAIL,CAAC,GAAG,CAAJ,GAAQL,GAAG,CAACa,MAAhB,EAAwB;QACpB,IAAMC,QAAQ,GAAGd,GAAG,CAACS,UAAJ,CAAeJ,CAAC,GAAG,CAAnB,CAAjB;QACA,IAAMU,KAAK,GACP,OAAOL,IAAI,CAACM,CAAZ,KAAkB,QAAlB,GACMN,IAAI,CAACM,CAAL,KAAWF,QAAX,GACIJ,IAAI,CAACO,CADT,GAEIC,SAHV,GAIMR,IAAI,CAACM,CAAL,CAAOJ,GAAP,CAAWE,QAAX,CALV;;QAOA,IAAIC,KAAK,KAAKG,SAAd,EAAyB;UACrBjB,GAAG,IAAIc,KAAP;UACAb,OAAO,GAAGH,MAAM,CAACoB,SAAP,IAAoB,CAA9B;UACA;QACH;MACJ;;MAEDT,IAAI,GAAGA,IAAI,CAACU,CAAZ;IACH,CAzBuC,CA2BxC;;;IACA,IAAIV,IAAI,KAAKQ,SAAb,EAAwB;MACpBjB,GAAG,IAAIS,IAAP;MACAR,OAAO,GAAGG,CAAC,GAAG,CAAd;IACH,CAHD,MAGO;MACH,IAAMgB,EAAE,GAAG,8BAAarB,GAAb,EAAkBK,CAAlB,CAAX;MACAJ,GAAG,IAAI,aAAMoB,EAAE,CAACC,QAAH,CAAY,EAAZ,CAAN,EAAqB,GAArB,CAAP,CAFG,CAGH;;MACApB,OAAO,GAAGH,MAAM,CAACoB,SAAP,IAAoBI,MAAM,CAACF,EAAE,KAAKb,IAAR,CAApC;IACH;EACJ;;EAED,OAAOP,GAAG,GAAGD,GAAG,CAACwB,MAAJ,CAAWtB,OAAX,CAAb;AACH","names":["htmlReplacer","encodeHTML","data","encodeHTMLTrieRe","exports","encodeNonAsciiHTML","escape_js_1","regExp","str","ret","lastIdx","match","exec","i","index","substring","char","charCodeAt","next","encode_html_js_1","get","length","nextChar","value","n","o","undefined","lastIndex","v","cp","toString","Number","substr"],"sources":["encode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
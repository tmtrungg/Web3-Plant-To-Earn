{"ast":null,"code":"/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param {Object} [options] - Options bag.\n * @param {boolean} [options.mustBeMetaMask] - Whether to only look for MetaMask\n * providers. Default: false\n * @param {number} [options.timeout] - Milliseconds to wait for\n * 'ethereum#initialized' to be dispatched. Default: 3000\n * @returns {Promise<EthereumProvider | null>} A Promise that resolves with the Provider if it\n * is detected within the given timeout, otherwise null.\n */\nmodule.exports = function detectProvider() {\n  let {\n    mustBeMetaMask = false,\n    timeout = 3000\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof timeout !== 'number') {\n    throw new Error(`@metamask/detect-provider: Expected 'number' timeout.`);\n  }\n\n  if (typeof mustBeMetaMask !== 'boolean') {\n    throw new Error(`@metamask/detect-provider: Expected 'boolean' mustBeMetaMask.`);\n  }\n\n  let handled = false;\n  return new Promise(resolve => {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        const message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n};","map":{"version":3,"names":["module","exports","detectProvider","mustBeMetaMask","timeout","Error","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","isMetaMask","message","console","error"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/@metamask/detect-provider/index.js"],"sourcesContent":["/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param {Object} [options] - Options bag.\n * @param {boolean} [options.mustBeMetaMask] - Whether to only look for MetaMask\n * providers. Default: false\n * @param {number} [options.timeout] - Milliseconds to wait for\n * 'ethereum#initialized' to be dispatched. Default: 3000\n * @returns {Promise<EthereumProvider | null>} A Promise that resolves with the Provider if it\n * is detected within the given timeout, otherwise null.\n */\nmodule.exports = function detectProvider ({\n  mustBeMetaMask = false,\n  timeout = 3000,\n} = {}) {\n\n  if (typeof timeout !== 'number') {\n    throw new Error(`@metamask/detect-provider: Expected 'number' timeout.`)\n  }\n  if (typeof mustBeMetaMask !== 'boolean') {\n    throw new Error(`@metamask/detect-provider: Expected 'boolean' mustBeMetaMask.`)\n  }\n\n  let handled = false\n\n  return new Promise((resolve) => {\n    if (window.ethereum) {\n\n      handleEthereum()\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      )\n\n      setTimeout(() => {\n        handleEthereum()\n      }, timeout)\n    }\n\n    function handleEthereum () {\n\n      if (handled) {\n        return\n      }\n      handled = true\n\n      window.removeEventListener('ethereum#initialized', handleEthereum)\n\n      const { ethereum } = window\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum)\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.'\n\n        console.error('@metamask/detect-provider:', message)\n        resolve(null)\n      }\n    }\n  })\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,GAGT;EAAA,IAHkC;IACxCC,cAAc,GAAG,KADuB;IAExCC,OAAO,GAAG;EAF8B,CAGlC,uEAAJ,EAAI;;EAEN,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,MAAM,IAAIC,KAAJ,CAAW,uDAAX,CAAN;EACD;;EACD,IAAI,OAAOF,cAAP,KAA0B,SAA9B,EAAyC;IACvC,MAAM,IAAIE,KAAJ,CAAW,+DAAX,CAAN;EACD;;EAED,IAAIC,OAAO,GAAG,KAAd;EAEA,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;IAC9B,IAAIC,MAAM,CAACC,QAAX,EAAqB;MAEnBC,cAAc;IAEf,CAJD,MAIO;MAELF,MAAM,CAACG,gBAAP,CACE,sBADF,EAEED,cAFF,EAGE;QAAEE,IAAI,EAAE;MAAR,CAHF;MAMAC,UAAU,CAAC,MAAM;QACfH,cAAc;MACf,CAFS,EAEPP,OAFO,CAAV;IAGD;;IAED,SAASO,cAAT,GAA2B;MAEzB,IAAIL,OAAJ,EAAa;QACX;MACD;;MACDA,OAAO,GAAG,IAAV;MAEAG,MAAM,CAACM,mBAAP,CAA2B,sBAA3B,EAAmDJ,cAAnD;MAEA,MAAM;QAAED;MAAF,IAAeD,MAArB;;MAEA,IAAIC,QAAQ,KAAK,CAACP,cAAD,IAAmBO,QAAQ,CAACM,UAAjC,CAAZ,EAA0D;QACxDR,OAAO,CAACE,QAAD,CAAP;MACD,CAFD,MAEO;QAEL,MAAMO,OAAO,GAAGd,cAAc,IAAIO,QAAlB,GACZ,wCADY,GAEZ,mCAFJ;QAIAQ,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CF,OAA5C;QACAT,OAAO,CAAC,IAAD,CAAP;MACD;IACF;EACF,CAzCM,CAAP;AA0CD,CAxDD"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CloneArbitrary = void 0;\n\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\n\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\n\nconst symbols_1 = require(\"../../check/symbols\");\n\nconst Stream_1 = require(\"../../stream/Stream\");\n\nclass CloneArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(arb, numValues) {\n    super();\n    this.arb = arb;\n    this.numValues = numValues;\n  }\n\n  generate(mrng, biasFactor) {\n    const items = [];\n\n    if (this.numValues <= 0) {\n      return this.wrapper(items);\n    }\n\n    for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n      items.push(this.arb.generate(mrng.clone(), biasFactor));\n    }\n\n    items.push(this.arb.generate(mrng, biasFactor));\n    return this.wrapper(items);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || value.length !== this.numValues) {\n      return false;\n    }\n\n    if (value.length === 0) {\n      return true;\n    }\n\n    for (let index = 1; index < value.length; ++index) {\n      if (!Object.is(value[0], value[index])) {\n        return false;\n      }\n    }\n\n    return this.arb.canShrinkWithoutContext(value[0]);\n  }\n\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n\n    return new Stream_1.Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map(v => this.wrapper(v));\n  }\n\n  *shrinkImpl(value, contexts) {\n    const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n    let cur = its.map(it => it.next());\n\n    while (!cur[0].done) {\n      yield cur.map(c => c.value);\n      cur = its.map(it => it.next());\n    }\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[symbols_1.cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  wrapper(items) {\n    let cloneable = false;\n    const vs = [];\n    const contexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      contexts.push(s.context);\n    }\n\n    if (cloneable) {\n      CloneArbitrary.makeItCloneable(vs, items);\n    }\n\n    return new Value_1.Value(vs, contexts);\n  }\n\n}\n\nexports.CloneArbitrary = CloneArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","CloneArbitrary","Arbitrary_1","require","Value_1","symbols_1","Stream_1","Arbitrary","constructor","arb","numValues","generate","mrng","biasFactor","items","wrapper","idx","push","clone","canShrinkWithoutContext","Array","isArray","length","index","is","shrink","context","Stream","nil","shrinkImpl","undefined","map","v","contexts","its","Symbol","iterator","cur","it","next","done","c","makeItCloneable","vs","shrinkables","cloneMethod","cloned","cloneable","s","hasToBeCloned","Value"],"sources":["/Users/tranminhtrung/Desktop/learn_web3/gamble/node_modules/fast-check/lib/arbitrary/_internals/CloneArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloneArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst symbols_1 = require(\"../../check/symbols\");\nconst Stream_1 = require(\"../../stream/Stream\");\nclass CloneArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(arb, numValues) {\n        super();\n        this.arb = arb;\n        this.numValues = numValues;\n    }\n    generate(mrng, biasFactor) {\n        const items = [];\n        if (this.numValues <= 0) {\n            return this.wrapper(items);\n        }\n        for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n            items.push(this.arb.generate(mrng.clone(), biasFactor));\n        }\n        items.push(this.arb.generate(mrng, biasFactor));\n        return this.wrapper(items);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.numValues) {\n            return false;\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (let index = 1; index < value.length; ++index) {\n            if (!Object.is(value[0], value[index])) {\n                return false;\n            }\n        }\n        return this.arb.canShrinkWithoutContext(value[0]);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        return new Stream_1.Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map((v) => this.wrapper(v));\n    }\n    *shrinkImpl(value, contexts) {\n        const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n        let cur = its.map((it) => it.next());\n        while (!cur[0].done) {\n            yield cur.map((c) => c.value);\n            cur = its.map((it) => it.next());\n        }\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[symbols_1.cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    wrapper(items) {\n        let cloneable = false;\n        const vs = [];\n        const contexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            contexts.push(s.context);\n        }\n        if (cloneable) {\n            CloneArbitrary.makeItCloneable(vs, items);\n        }\n        return new Value_1.Value(vs, contexts);\n    }\n}\nexports.CloneArbitrary = CloneArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}